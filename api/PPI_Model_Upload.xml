<?xml version="1.0" encoding="utf-8"?>
<class final="false" abstract="false" line="577" namespace="default" package="cmf\external">
      <name>PPI_Model_Upload</name>
      <extends/>
      <full_name>\PPI_Model_Upload</full_name>
      <docblock>
        <description>Class upload</description>
        <long-description>&lt;p&gt;&lt;b&gt;What does it do?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;It manages file uploads for you. In short, it manages the uploaded file,
and allows you to do whatever you want with the file, especially if it
is an image, and as many times as you want.&lt;/p&gt;

&lt;p&gt;It is the ideal class to quickly integrate file upload in your site.
If the file is an image, you can convert, resize, crop it in many ways.
You can also apply filters, add borders, text, watermarks, etc...
That's all you need for a gallery script for instance. Supported formats
are PNG, JPG, GIF and BMP.&lt;/p&gt;

&lt;p&gt;You can also use the class to work on local files, which is especially
useful to use the image manipulation features. The class also supports
Flash uploaders.&lt;/p&gt;

&lt;p&gt;The class works with PHP 4 and 5, and its error messages can
be localized at will.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How does it work?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;You instanciate the class with the $_FILES['my_field'] array
where my_field is the field name from your upload form.
The class will check if the original file has been uploaded
to its temporary location (alternatively, you can instanciate
the class with a local filename).&lt;/p&gt;

&lt;p&gt;You can then set a number of processing variables to act on the file.
For instance, you can rename the file, and if it is an image,
convert and resize it in many ways.
You can also set what will the class do if the file already exists.&lt;/p&gt;

&lt;p&gt;Then you call the function {@link process} to actually perform the actions
according to the processing parameters you set above.
It will create new instances of the original file,
so the original file remains the same between each process.
The file will be manipulated, and copied to the given location.
The processing variables will be reset once it is done.&lt;/p&gt;

&lt;p&gt;You can repeat setting up a new set of processing variables,
and calling {@link process} again as many times as you want.
When you have finished, you can call {@link clean} to delete
the original uploaded file.&lt;/p&gt;

&lt;p&gt;If you don't set any processing parameters and call {@link process}
just after instanciating the class. The uploaded file will be simply
copied to the given location without any alteration or checks.&lt;/p&gt;

&lt;p&gt;Don't forget to add &lt;i&gt;enctype="multipart/form-data"&lt;/i&gt; in your form
tag&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;/p&gt;

&lt;p&gt;form&gt; if you want your form to upload the file.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How to use it?&lt;/b&gt;&lt;br&gt;
Create a simple HTML file, with a form such as:&lt;/p&gt;

&lt;pre&gt;
&lt;form enctype="multipart/form-data" method="post" action="upload.php"&gt;
  &lt;input type="file" size="32" name="image_field" value=""&gt;
  &lt;input type="submit" name="Submit" value="upload"&gt;
&lt;/form&gt;
&lt;/pre&gt;

&lt;p&gt;Create a file called upload.php:&lt;/p&gt;

&lt;pre&gt;
 $handle = new upload($_FILES['image_field']);
 if ($handle-&gt;uploaded) {
     $handle-&gt;file_new_name_body   = 'image_resized';
     $handle-&gt;image_resize         = true;
     $handle-&gt;image_x              = 100;
     $handle-&gt;image_ratio_y        = true;
     $handle-&gt;process('/home/user/files/');
     if ($handle-&gt;processed) {
         echo 'image resized';
         $handle-&gt;clean();
     } else {
         echo 'error : ' . $handle-&gt;error;
     }
 }
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;How to process local files?&lt;/b&gt;&lt;br&gt;
Use the class as following, the rest being the same as above:&lt;/p&gt;

&lt;pre&gt;
 $handle = new upload('/home/user/myfile.jpg');
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;How to set the language?&lt;/b&gt;&lt;br&gt;
Instantiate the class with a second argument being the language code:&lt;/p&gt;

&lt;pre&gt;
 $handle = new upload($_FILES['image_field'], 'fr_FR');
 $handle = new upload('/home/user/myfile.jpg', 'fr_FR');
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;How to output the resulting file or picture directly to the browser?&lt;/b&gt;&lt;br&gt;
Simply call {@link process}() without an argument (or with null as first argument):&lt;/p&gt;

&lt;pre&gt;
 $handle = new upload($_FILES['image_field']);
 header('Content-type: ' . $handle-&gt;file_src_mime);
 echo $handle-&gt;Process();
 die();
&lt;/pre&gt;

&lt;p&gt;Or if you want to force the download of the file:&lt;/p&gt;

&lt;pre&gt;
 $handle = new upload($_FILES['image_field']);
 header('Content-type: ' . $handle-&gt;file_src_mime);
 header("Content-Disposition: attachment; filename=".rawurlencode($handle-&gt;file_src_name).";");
 echo $handle-&gt;Process();
 die();
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Processing parameters&lt;/b&gt; (reset after each process)&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link file_new_name_body}&lt;/b&gt; replaces the name body (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_new_name_body = 'new name';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_name_body_add}&lt;/b&gt; appends to the name body (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_name_body_add = '_uploaded';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_name_body_pre}&lt;/b&gt; prepends to the name body (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_name_body_pre = 'thumb_';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_new_name_ext}&lt;/b&gt; replaces the file extension (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_new_name_ext = 'txt';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_safe_name}&lt;/b&gt; formats the filename (spaces changed to _) (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_safe_name = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_force_extension}&lt;/b&gt; forces an extension if there is't any (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_force_extension = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_overwrite}&lt;/b&gt; sets behaviour if file already exists (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_overwrite = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_auto_rename}&lt;/b&gt; automatically renames file if it already exists (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_auto_rename = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link dir_auto_create}&lt;/b&gt; automatically creates destination directory if missing (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;auto_create_dir = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link dir_auto_chmod}&lt;/b&gt; automatically attempts to chmod the destination directory if not writeable (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;dir_auto_chmod = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link dir_chmod}&lt;/b&gt; chmod used when creating directory or if directory not writeable (default: 0777)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;dir_chmod = 0777;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_max_size}&lt;/b&gt; sets maximum upload size (default: upload_max_filesize from php.ini)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;file_max_size = '1024'; // 1KB&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link mime_check}&lt;/b&gt; sets if the class check the MIME against the {@link allowed} list (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;mime_check = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link no_script}&lt;/b&gt; sets if the class turns scripts into text files (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;no_script = false;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link allowed}&lt;/b&gt; array of allowed mime-types (or one string). wildcard accepted, as in image/* (default: check {@link Init})&lt;br&gt;
 &lt;pre&gt;$handle-&gt;allowed = array('application/pdf','application/msword', 'image/*');&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link forbidden}&lt;/b&gt; array of forbidden mime-types (or one string). wildcard accepted, as in image/*  (default: check {@link Init})&lt;br&gt;
 &lt;pre&gt;$handle-&gt;forbidden = array('application/*');&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_convert}&lt;/b&gt; if set, image will be converted (possible values : ''|'png'|'jpeg'|'gif'|'bmp'; default: '')&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_convert = 'jpg';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_background_color}&lt;/b&gt; if set, will forcibly fill transparent areas with the color, in hexadecimal (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_background_color = '#FF00FF';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_default_color}&lt;/b&gt; fallback color background color for non alpha-transparent output formats, such as JPEG or BMP, in hexadecimal (default: #FFFFFF)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_default_color = '#FF00FF';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link jpeg_quality}&lt;/b&gt; sets the compression quality for JPEG images (default: 85)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;jpeg_quality = 50;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link jpeg_size}&lt;/b&gt; if set to a size in bytes, will approximate {@link jpeg_quality} so the output image fits within the size (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;jpeg_size = 3072;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following eight settings can be used to invalidate an upload if the file is an image (note that &lt;i&gt;open_basedir&lt;/i&gt; restrictions prevent the use of these settings)&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_max_width}&lt;/b&gt; if set to a dimension in pixels, the upload will be invalid if the image width is greater (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_max_width = 200;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_max_height}&lt;/b&gt; if set to a dimension in pixels, the upload will be invalid if the image height is greater (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_max_height = 100;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_max_pixels}&lt;/b&gt; if set to a number of pixels, the upload will be invalid if the image number of pixels is greater (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_max_pixels = 50000;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_max_ratio}&lt;/b&gt; if set to a aspect ratio (width/height), the upload will be invalid if the image apect ratio is greater (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_max_ratio = 1.5;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_min_width}&lt;/b&gt; if set to a dimension in pixels, the upload will be invalid if the image width is lower (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_min_width = 100;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_min_height}&lt;/b&gt; if set to a dimension in pixels, the upload will be invalid if the image height is lower (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_min_height = 500;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_min_pixels}&lt;/b&gt; if set to a number of pixels, the upload will be invalid if the image number of pixels is lower (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_min_pixels = 20000;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_min_ratio}&lt;/b&gt; if set to a aspect ratio (width/height), the upload will be invalid if the image apect ratio is lower (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_min_ratio = 0.5;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_resize}&lt;/b&gt; determines is an image will be resized (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_resize = true;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following variables are used only if {@link image_resize} == true&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_x}&lt;/b&gt; destination image width (default: 150)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_x = 100;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_y}&lt;/b&gt; destination image height (default: 150)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_y = 200;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use either one of the following&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio}&lt;/b&gt; if true, resize image conserving the original sizes ratio, using {@link image_x} AND {@link image_y} as max sizes if true (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio_crop}&lt;/b&gt; if true, resize image conserving the original sizes ratio, using {@link image_x} AND {@link image_y} as max sizes, and cropping excedent to fill the space. setting can also be a string, with one or more from 'TBLR', indicating which side of the image will be kept while cropping (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio_crop = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio_fill}&lt;/b&gt; if true, resize image conserving the original sizes ratio, using {@link image_x} AND {@link image_y} as max sizes, fitting the image in the space and coloring the remaining space. setting can also be a string, with one or more from 'TBLR', indicating which side of the space the image will be in (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio_fill = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio_no_zoom_in}&lt;/b&gt; same as {@link image_ratio}, but won't resize if the source image is smaller than {@link image_x} x {@link image_y} (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio_no_zoom_in = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio_no_zoom_out}&lt;/b&gt; same as {@link image_ratio}, but won't resize if the source image is bigger than {@link image_x} x {@link image_y} (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio_no_zoom_out = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio_x}&lt;/b&gt; if true, resize image, calculating {@link image_x} from {@link image_y} and conserving the original sizes ratio (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio_x = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio_y}&lt;/b&gt; if true, resize image, calculating {@link image_y} from {@link image_x} and conserving the original sizes ratio (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio_y = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_ratio_pixels}&lt;/b&gt; if set to a long integer, resize image, calculating {@link image_y} and {@link image_x} to match a the number of pixels (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_ratio_pixels = 25000;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following image manipulations require GD2+&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_brightness}&lt;/b&gt; if set, corrects the brightness. value between -127 and 127 (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_brightness = 40;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_contrast}&lt;/b&gt; if set, corrects the contrast. value between -127 and 127 (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_contrast = 50;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_opacity}&lt;/b&gt; if set, changes the image opacity. value between 0 and 100 (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_opacity = 50;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_tint_color}&lt;/b&gt; if set, will tint the image with a color, value as hexadecimal #FFFFFF (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_tint_color = '#FF0000';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_overlay_color}&lt;/b&gt; if set, will add a colored overlay, value as hexadecimal #FFFFFF (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_overlay_color = '#FF0000';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_overlay_opacity}&lt;/b&gt; used when {@link image_overlay_color} is set, determines the opacity (default: 50)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_overlay_opacity = 20;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_negative}&lt;/b&gt; inverts the colors in the image (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_negative = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_greyscale}&lt;/b&gt; transforms an image into greyscale (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_greyscale = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_threshold}&lt;/b&gt; applies a threshold filter. value between -127 and 127 (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_threshold = 20;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_unsharp}&lt;/b&gt; applies an unsharp mask, with alpha transparency support (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_unsharp = true;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_unsharp_amount}&lt;/b&gt; unsharp mask amount, typically 50 - 200 (default: 80)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_unsharp_amount = 120;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_unsharp_radius}&lt;/b&gt; unsharp mask radius, typically 0.5 - 1 (default: 0.5)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_unsharp_radius = 0.8;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_unsharp_threshold}&lt;/b&gt; unsharp mask threshold, typically 0 - 5 (default: 1)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_unsharp_threshold = 0;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text}&lt;/b&gt; creates a text label on the image, value is a string, with eventual replacement tokens (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text = 'test';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_direction}&lt;/b&gt; text label direction, either 'h' horizontal or 'v' vertical (default: 'h')&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_direction = 'v';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_color}&lt;/b&gt; text color for the text label, in hexadecimal (default: #FFFFFF)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_color = '#FF0000';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_opacity}&lt;/b&gt; text opacity on the text label, integer between 0 and 100 (default: 100)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_opacity = 50;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_background}&lt;/b&gt; text label background color, in hexadecimal (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_background = '#FFFFFF';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_background_opacity}&lt;/b&gt; text label background opacity, integer between 0 and 100 (default: 100)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_background_opacity = 50;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_font}&lt;/b&gt; built-in font for the text label, from 1 to 5. 1 is the smallest (default: 5)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_font = 4;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_x}&lt;/b&gt; absolute text label position, in pixels from the left border. can be negative (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_x = 5;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_y}&lt;/b&gt; absolute text label position, in pixels from the top border. can be negative (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_y = 5;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_position}&lt;/b&gt; text label position withing the image, a combination of one or two from 'TBLR': top, bottom, left, right (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_position = 'LR';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_padding}&lt;/b&gt; text label padding, in pixels. can be overridden by {@link image_text_padding_x} and {@link image_text_padding_y} (default: 0)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_padding = 5;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_padding_x}&lt;/b&gt; text label horizontal padding (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_padding_x = 2;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_padding_y}&lt;/b&gt; text label vertical padding (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_padding_y = 10;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_alignment}&lt;/b&gt; text alignment when text has multiple lines, either 'L', 'C' or 'R' (default: 'C')&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_alignment = 'R';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_text_line_spacing}&lt;/b&gt; space between lines in pixels, when text has multiple lines (default: 0)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_text_line_spacing = 3;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_flip}&lt;/b&gt; flips image, wither 'h' horizontal or 'v' vertical (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_flip = 'h';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_rotate}&lt;/b&gt; rotates image. possible values are 90, 180 and 270 (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_rotate = 90;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_crop}&lt;/b&gt; crops image. accepts 4, 2 or 1 values as 'T R B L' or 'TB LR' or 'TBLR'. dimension can be 20, or 20px or 20% (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_crop = array(50,40,30,20); OR '-20 20%'...&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_precrop}&lt;/b&gt; crops image, before an eventual resizing. accepts 4, 2 or 1 values as 'T R B L' or 'TB LR' or 'TBLR'. dimension can be 20, or 20px or 20% (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_precrop = array(50,40,30,20); OR '-20 20%'...&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_bevel}&lt;/b&gt; adds a bevel border to the image. value is thickness in pixels (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_bevel = 20;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_bevel_color1}&lt;/b&gt; top and left bevel color, in hexadecimal (default: #FFFFFF)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_bevel_color1 = '#FFFFFF';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_bevel_color2}&lt;/b&gt; bottom and right bevel color, in hexadecimal (default: #000000)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_bevel_color2 = '#000000';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_border}&lt;/b&gt; adds a unicolor border to the image. accepts 4, 2 or 1 values as 'T R B L' or 'TB LR' or 'TBLR'. dimension can be 20, or 20px or 20% (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_border = '3px'; OR '-20 20%' OR array(3,2)...&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_border_color}&lt;/b&gt; border color, in hexadecimal (default: #FFFFFF)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_border_color = '#FFFFFF';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_border_opacity}&lt;/b&gt; border opacity, integer between 0 and 100 (default: 100)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_border_opacity = 50;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_border_transparent}&lt;/b&gt; adds a fading-to-transparent border to the image. accepts 4, 2 or 1 values as 'T R B L' or 'TB LR' or 'TBLR'. dimension can be 20, or 20px or 20% (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_border_transparent = '3px'; OR '-20 20%' OR array(3,2)...&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_frame}&lt;/b&gt; type of frame: 1=flat 2=crossed (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_frame = 2;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_frame_colors}&lt;/b&gt; list of hex colors, in an array or a space separated string (default: '#FFFFFF #999999 #666666 #000000')&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_frame_colors = array('#999999',  '#FF0000', '#666666', '#333333', '#000000');&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_frame_opacity}&lt;/b&gt; frame opacity, integer between 0 and 100 (default: 100)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_frame_opacity = 50;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_watermark}&lt;/b&gt; adds a watermark on the image, value is a local filename. accepted files are GIF, JPG, BMP, PNG and PNG alpha (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_watermark = 'watermark.png';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_watermark_x}&lt;/b&gt; absolute watermark position, in pixels from the left border. can be negative (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_watermark_x = 5;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_watermark_y}&lt;/b&gt; absolute watermark position, in pixels from the top border. can be negative (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_watermark_y = 5;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_watermark_position}&lt;/b&gt; watermark position withing the image, a combination of one or two from 'TBLR': top, bottom, left, right (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_watermark_position = 'LR';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_watermark_no_zoom_in}&lt;/b&gt; prevents the watermark to be resized up if it is smaller than the image (default: true)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_watermark_no_zoom_in = false;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_watermark_no_zoom_out}&lt;/b&gt; prevents the watermark to be resized down if it is bigger than the image (default: false)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_watermark_no_zoom_out = true;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_reflection_height}&lt;/b&gt; if set, a reflection will be added. Format is either in pixels or percentage, such as 40, '40', '40px' or '40%' (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_reflection_height = '25%';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_reflection_space}&lt;/b&gt; space in pixels between the source image and the reflection, can be negative (default: null)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_reflection_space = 3;&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_reflection_color}&lt;/b&gt; reflection background color, in hexadecimal. Now deprecated in favor of {@link image_default_color} (default: #FFFFFF)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_default_color = '#000000';&lt;/pre&gt;&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_reflection_opacity}&lt;/b&gt; opacity level at which the reflection starts, integer between 0 and 100 (default: 60)&lt;br&gt;
 &lt;pre&gt;$handle-&gt;image_reflection_opacity = 60;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Values that can be read before calling {@link process}()&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link file_src_name}&lt;/b&gt; Source file name&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_src_name_body}&lt;/b&gt; Source file name body&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_src_name_ext}&lt;/b&gt; Source file extension&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_src_pathname}&lt;/b&gt; Source file complete path and name&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_src_mime}&lt;/b&gt; Source file mime type&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_src_size}&lt;/b&gt; Source file size in bytes&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_src_error}&lt;/b&gt; Upload error code&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_is_image}&lt;/b&gt; Boolean flag, true if the file is a supported image type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the file is a supported image type (and &lt;i&gt;open_basedir&lt;/i&gt; restrictions allow it)&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_src_x}&lt;/b&gt; Source file width in pixels&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_src_y}&lt;/b&gt; Source file height in pixels&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_src_pixels}&lt;/b&gt; Source file number of pixels&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_src_type}&lt;/b&gt; Source file type (png, jpg, gif or bmp)&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_src_bits}&lt;/b&gt; Source file color depth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Values that can be read after calling {@link process}()&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link file_dst_path}&lt;/b&gt; Destination file path&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_dst_name_body}&lt;/b&gt; Destination file name body&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_dst_name_ext}&lt;/b&gt; Destination file extension&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_dst_name}&lt;/b&gt; Destination file name&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link file_dst_pathname}&lt;/b&gt; Destination file complete path and name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the file is a supported image type&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;{@link image_dst_x}&lt;/b&gt; Destination file width&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_dst_y}&lt;/b&gt; Destination file height&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;{@link image_convert}&lt;/b&gt; Destination file format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Requirements&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Most of the image operations require GD. GD2 is greatly recommended&lt;/p&gt;

&lt;p&gt;The class is compatible with PHP 4.3+, and compatible with PHP5&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Changelog&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;b&gt;v 0.31&lt;/b&gt; 11/04/2011&lt;br&gt;
  - added application/x-rar MIME type&lt;br&gt;
  - make sure exec() and ini_get_all()function are not disabled if we want to use them&lt;br&gt;
  - make sure that we don't divide by zero when calculating JPEG size&lt;br&gt;
  - {@link allowed} and {@link forbidden} can now accept strings&lt;br&gt;
  - try to guess the file extension from the MIME type if there is no file extension&lt;br&gt;
  - better class properties when changing the file extension&lt;br&gt;
  - added {@link file_force_extension} to allow extension-less files if needed&lt;br&gt;
  - better file safe conversion of the filename&lt;br&gt;
  - allow shorthand byte values, such as 1K, 2M, 3G for {@link file_max_size} and {@link jpeg_size}&lt;br&gt;
  - added {@link image_opacity} to change picture opacity&lt;br&gt;
  - added {@link image_border_opacity} to allow semi-transparent borders&lt;br&gt;
  - added {@link image_frame_opacity} to allow semi-transparent frames&lt;br&gt;
  - added {@link image_border_transparent} to allow borders fading to transparent&lt;br&gt;
  - duplicated {@link image_overlay_percent} into {@link image_overlay_opacity}&lt;br&gt;
  - duplicated {@link image_text_percent} into {@link image_text_opacity}&lt;br&gt;
  - duplicated {@link image_text_background_percent} into {@link image_text_background_opacity}&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.30&lt;/b&gt; 05/09/2010&lt;br&gt;
  - implemented an unsharp mask, with alpha transparency support, activated if {@link image_unsharp} is true. added {@link image_unsharp_amount}, {@link image_unsharp_radius}, and {@link image_unsharp_threshold}&lt;br&gt;
  - added text/rtf MIME type, and no_script exception&lt;br&gt;
  - corrected bug when {@link no_script} is activated and several process() are called&lt;br&gt;
  - better error handling for finfo&lt;br&gt;
  - display upload_max_filesize information from php.ini in the log&lt;br&gt;
  - automatic extension for extension-less images&lt;br&gt;
  - fixed {@link image_ratio_fill} top and left filling&lt;br&gt;
  - fixed alphablending issue when applying a transparent PNG watermark on a transparent PNG&lt;br&gt;
  - added {@link image_watermark_no_zoom_in} and {@link image_watermark_no_zoom_out} to allow the watermark to be resized down (or up) to fit in the image. By default, the watermark may be resized down, but not up.&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.29&lt;/b&gt; 03/02/2010&lt;br&gt;
  - added protection against malicious images&lt;br&gt;
  - added zip and torrent MIME type&lt;br&gt;
  - replaced split() with explode()&lt;br&gt;
  - initialise image_dst_x/y with image_src_x/y&lt;br&gt;
  - removed {@link mime_fileinfo}, {@link mime_file}, {@link mime_magic} and {@link mime_getimagesize} from the docs since they are used before {@link process}&lt;br&gt;
  - added more extensions and MIME types&lt;br&gt;
  - improved MIME type validation&lt;br&gt;
  - improved logging&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.28&lt;/b&gt; 10/08/2009&lt;br&gt;
  - replaced ereg functions to be compatible with PHP 5.3&lt;br&gt;
  - added flv MIME type&lt;br&gt;
  - improved MIME type detection&lt;br&gt;
  - added {@link file_name_body_pre} to prepend a string to the file name&lt;br&gt;
  - added {@link mime_fileinfo}, {@link mime_file}, {@link mime_magic} and {@link mime_getimagesize} so that it is possible to deactivate some MIME type checking method&lt;br&gt;
  - use exec() rather than shell_exec(), to play better with safe mode &lt;br&gt;
  - added some error messages&lt;br&gt;
  - fix bug when checking on conditions, {@link processed} wasn't propagated properly&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.27&lt;/b&gt; 14/05/2009&lt;br&gt;
  - look for the language files directory from __FILE__&lt;br&gt;
  - deactivate {@link file_auto_rename} if {@link file_overwrite} is set&lt;br&gt;
  - improved transparency replacement for true color images&lt;br&gt;
  - fixed calls to newer version of UNIX file utility&lt;br&gt;
  - fixed error when using PECL Fileinfo extension in SAFE MODE, and when using the finfo class&lt;br&gt;
  - added {@link image_precrop} to crop the image before an eventual resizing&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.26&lt;/b&gt; 13/11/2008&lt;br&gt;
  - rewrote conversion from palette to true color to handle transparency better&lt;br&gt;
  - fixed imagecopymergealpha() when the overlayed image is of wrong dimensions&lt;br&gt;
  - fixed imagecreatenew() when the image to create have less than 1 pixels width or height&lt;br&gt;
  - rewrote MIME type detection to be more secure and not rely on browser information; now using Fileinfo PECL extension, UNIX file() command, MIME magic, and getimagesize(), in that order&lt;br&gt;
  - added support for Flash uploaders&lt;br&gt;
  - some bug fixing and error handling&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.25&lt;/b&gt; 17/11/2007&lt;br&gt;
  - added translation files and mechanism to instantiate the class with a language different from English&lt;br&gt;
  - added {@link forbidden} to set an array of forbidden MIME types&lt;br&gt;
  - implemented support for simple wildcards in {@link allowed} and {@link forbidden}, such as image/*&lt;br&gt;
  - preset the file extension to the desired conversion format when converting an image&lt;br&gt;
  - added read and write support for BMP images&lt;br&gt;
  - added a flag {@link file_is_image} to determine if the file is a supported image type&lt;br&gt;
  - the class now provides some information about the image, before calling {@link process}(). Available are {@link image_src_x}, {@link image_src_y} and the newly introduced {@link image_src_bits}, {@link image_src_pixels} and {@link image_src_type}. Note that this will not work if &lt;i&gt;open_basedir&lt;/i&gt; restrictions are in place&lt;br&gt;
  - improved logging; now provides useful system information&lt;br&gt;
  - added some more pre-processing checks for files that are images: {@link image_max_width}, {@link image_max_height}, {@link image_max_pixels}, {@link image_max_ratio}, {@link image_min_width}, {@link image_min_height}, {@link image_min_pixels} and {@link image_min_ratio}&lt;br&gt;
  - added {@link image_ratio_pixels} to resize an image to a number of pixels, keeping aspect ratio&lt;br&gt;
  - added {@link image_is_palette} and {@link image_is_transparent} and {@link image_transparent_color} for GIF images&lt;br&gt;
  - added {@link image_default_color} to define a fallback color for non alpha-transparent output formats, such as JPEG or BMP&lt;br&gt;
  - changed {@link image_background_color}, which now forces transparent areas to be painted&lt;br&gt;
  - improved reflections and color overlays so that it works with alpha transparent images&lt;br&gt;
  - {@link image_reflection_color} is now deprecated in favour of {@link image_default_color}&lt;br /&gt;
  - transparent PNGs are now processed in true color, and fully preserving the alpha channel when doing merges&lt;br&gt;
  - transparent GIFs are now automatically detected. {@link preserve_transparency} is deprecated&lt;br&gt;
  - transparent true color images can be saved as GIF while retaining transparency, semi transparent areas being merged with {@link image_default_color}&lt;br&gt;
  - transparent true color images can be saved as JPG/BMP with the semi transparent areas being merged with {@link image_default_color}&lt;br&gt;
  - fixed conversion of images to true color&lt;br&gt;
  - the class can now output the uploaded files content as the return value of process() if the function is called with an empty or null argumenti, or no argument&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.24&lt;/b&gt; 25/05/2007&lt;br&gt;
  - added {@link image_background_color}, to set the default background color of an image&lt;br&gt;
  - added possibility of using replacement tokens in text labels&lt;br&gt;
  - changed default JPEG quality to 85&lt;br&gt;
  - fixed a small bug when using greyscale filter and associated filters&lt;br&gt;
  - added {@link image_ratio_fill} in order to fit an image within some dimensions and color the remaining space. Very similar to {@link image_ratio_crop}&lt;br&gt;
  - improved the recursive creation of directories&lt;br&gt;
  - the class now converts palette based images to true colors before doing graphic manipulations&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.23&lt;/b&gt; 23/12/2006&lt;br&gt;
  - fixed a bug when processing more than once the same uploaded file. If there is an open_basedir restriction, the class now creates a temporary file for the first call to process(). This file will be used for subsequent processes, and will be deleted upon calling clean()&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.22&lt;/b&gt; 16/12/2006&lt;br&gt;
  - added automatic creation of a temporary file if the upload directory is not within open_basedir&lt;br&gt;
  - fixed a bug which was preventing to work on a local file by overwriting it with its processed copy&lt;br&gt;
  - added MIME types video/x-ms-wmv and image/x-png and fixed PNG support for IE weird MIME types&lt;br&gt;
  - modified {@link image_ratio_crop} so it can accept one or more from string 'TBLR', determining which side of the image is kept while cropping&lt;br&gt;
  - added support for multiple lines in the text, using "\n" as a line break&lt;br&gt;
  - added {@link image_text_line_spacing} which allow to set the space between several lines of text&lt;br&gt;
  - added {@link image_text_alignment} which allow to set the alignment when text has several lines&lt;br&gt;
  - {@link image_text_font} can now be set to the path of a GDF font to load external fonts&lt;br&gt;
  - added {@link image_reflection_height} to create a reflection of the source image, which height is in pixels or percentage&lt;br&gt;
  - added {@link image_reflection_space} to set the space in pixels between the source image and the reflection&lt;br&gt;
  - added {@link image_reflection_color} to set the reflection background color&lt;br&gt;
  - added {@link image_reflection_opacity} to set the initial level of opacity of the reflection&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.21&lt;/b&gt; 30/09/2006&lt;br&gt;
  - added {@link image_ratio_crop} which resizes within {@link image_x} and {@link image_y}, keeping ratio, but filling the space by cropping excedent of image&lt;br&gt;
  - added {@link mime_check}, which default is true, to set checks against {@link allowed} MIME list&lt;br&gt;
  - if MIME is empty, the class now triggers an error&lt;br&gt;
  - color #000000 is OK for {@link image_text_color}, and related text transparency bug fixed&lt;br&gt;
  - {@link gd_version}() now uses gd_info(), or else phpinfo()&lt;br&gt;
  - fixed path issue when the destination path has no trailing slash on Windows systems &lt;br&gt;
  - removed inline functions to be fully PHP5 compatible &lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.20&lt;/b&gt; 11/08/2006&lt;br&gt;
  - added some more error checking and messages (GD presence, permissions...)&lt;br&gt;
  - fix when uploading files without extension&lt;br&gt;
  - changed values for {@link image_brightness} and {@link image_contrast} to be between -127 and 127&lt;br&gt;
  - added {@link dir_auto_create} to automatically and recursively create destination directory if missing.&lt;br&gt;
  - added {@link dir_auto_chmod} to automatically chmod the destination directory if not writeable.&lt;br&gt;
  - added {@link dir_chmod} to set the default chmod to use.&lt;br&gt;
  - added {@link image_crop} to crop images&lt;br&gt;
  - added {@link image_negative} to invert the colors on the image&lt;br&gt;
  - added {@link image_greyscale} to turn the image into greyscale&lt;br&gt;
  - added {@link image_threshold} to apply a threshold filter on the image&lt;br&gt;
  - added {@link image_bevel}, {@link image_bevel_color1} and {@link image_bevel_color2} to add a bevel border&lt;br&gt;
  - added {@link image_border} and {@link image_border_color} to add a single color border&lt;br&gt;
  - added {@link image_frame} and {@link image_frame_colors} to add a multicolored frame&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.19&lt;/b&gt; 29/03/2006&lt;br&gt;
  - class is now compatible i18n (thanks Sylwester).&lt;br&gt;
  - the class can mow manipulate local files, not only uploaded files (instanciate the class with a local filename).&lt;br&gt;
  - {@link file_safe_name} has been improved a bit.&lt;br&gt;
  - added {@link image_brightness}, {@link image_contrast}, {@link image_tint_color}, {@link image_overlay_color} and {@link image_overlay_percent} to do color manipulation on the images.&lt;br&gt;
  - added {@link image_text} and all derivated settings to add a text label on the image.&lt;br&gt;
  - added {@link image_watermark} and all derivated settings to add a watermark image on the image.&lt;br&gt;
  - added {@link image_flip} and {@link image_rotate} for more image manipulations&lt;br&gt;
  - added {@link jpeg_size} to calculate the JPG compression quality in order to fit within one filesize.&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.18&lt;/b&gt; 02/02/2006&lt;br&gt;
  - added {@link no_script} to turn dangerous scripts into text files.&lt;br&gt;
  - added {@link mime_magic_check} to set the class to use mime_magic.&lt;br&gt;
  - added {@link preserve_transparency} *experimental*. Thanks Gregor.&lt;br&gt;
  - fixed size and mime checking, wasn't working :/ Thanks Willem.&lt;br&gt;
  - fixed memory leak when resizing images.&lt;br&gt;
  - when resizing, it is not necessary anymore to set {@link image_convert}.&lt;br&gt;
  - il is now possible to simply convert an image, with no resizing.&lt;br&gt;
  - sets the default {@link file_max_size} to upload_max_filesize from php.ini. Thanks Edward&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.17&lt;/b&gt; 28/05/2005&lt;br&gt;
  - the class can be used with any version of GD.&lt;br&gt;
  - added security check on the file with a list of mime-types.&lt;br&gt;
  - changed the license to GPL v2 only&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.16&lt;/b&gt; 19/05/2005&lt;br&gt;
  - added {@link file_auto_rename} automatic file renaming if the same filename already exists.&lt;br&gt;
  - added {@link file_safe_name} safe formatting of the filename (spaces to _underscores so far).&lt;br&gt;
  - added some more error reporting to avoid crash if GD is not present&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.15&lt;/b&gt; 16/04/2005&lt;br&gt;
  - added JPEG compression quality setting. Thanks Vad&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.14&lt;/b&gt; 14/03/2005&lt;br&gt;
  - reworked the class file to allow parsing with phpDocumentor&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.13&lt;/b&gt; 07/03/2005&lt;br&gt;
  - fixed a bug with {@link image_ratio}. Thanks Justin.&lt;br&gt;
  - added {@link image_ratio_no_zoom_in} and {@link image_ratio_no_zoom_out} &lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.12&lt;/b&gt; 21/01/2005&lt;br&gt;
  - added {@link image_ratio} to resize within max values, keeping image ratio&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;v 0.11&lt;/b&gt; 22/08/2003&lt;br&gt;
  - update for GD2 (changed imageresized() into imagecopyresampled() and imagecreate() into imagecreatetruecolor())&lt;/li&gt;
&lt;/ul&gt;</long-description>
        <tag line="42" name="package" description="cmf"/>
        <tag line="42" name="subpackage" description="external"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="586" package="Default">
        <name>$version</name>
        <default/>
        <docblock>
          <description>Class version</description>
          <long-description/>
          <tag line="580" name="access" description="public"/>
          <tag line="580" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="594" package="Default">
        <name>$file_src_name</name>
        <default/>
        <docblock>
          <description>Uploaded file name</description>
          <long-description/>
          <tag line="588" name="access" description="public"/>
          <tag line="588" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="602" package="Default">
        <name>$file_src_name_body</name>
        <default/>
        <docblock>
          <description>Uploaded file name body (i.e. without extension)</description>
          <long-description/>
          <tag line="596" name="access" description="public"/>
          <tag line="596" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="610" package="Default">
        <name>$file_src_name_ext</name>
        <default/>
        <docblock>
          <description>Uploaded file name extension</description>
          <long-description/>
          <tag line="604" name="access" description="public"/>
          <tag line="604" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="618" package="Default">
        <name>$file_src_mime</name>
        <default/>
        <docblock>
          <description>Uploaded file MIME type</description>
          <long-description/>
          <tag line="612" name="access" description="public"/>
          <tag line="612" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="626" package="Default">
        <name>$file_src_size</name>
        <default/>
        <docblock>
          <description>Uploaded file size, in bytes</description>
          <long-description/>
          <tag line="620" name="access" description="public"/>
          <tag line="620" name="var" description="" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="634" package="Default">
        <name>$file_src_error</name>
        <default/>
        <docblock>
          <description>Holds eventual PHP error code from $_FILES</description>
          <long-description/>
          <tag line="628" name="access" description="public"/>
          <tag line="628" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="642" package="Default">
        <name>$file_src_pathname</name>
        <default/>
        <docblock>
          <description>Uloaded file name, including server path</description>
          <long-description/>
          <tag line="636" name="access" description="public"/>
          <tag line="636" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="650" package="Default">
        <name>$file_src_temp</name>
        <default/>
        <docblock>
          <description>Uloaded file name temporary copy</description>
          <long-description/>
          <tag line="644" name="access" description="private"/>
          <tag line="644" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="658" package="Default">
        <name>$file_dst_path</name>
        <default/>
        <docblock>
          <description>Destination file name</description>
          <long-description/>
          <tag line="652" name="access" description="public"/>
          <tag line="652" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="666" package="Default">
        <name>$file_dst_name</name>
        <default/>
        <docblock>
          <description>Destination file name</description>
          <long-description/>
          <tag line="660" name="access" description="public"/>
          <tag line="660" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="674" package="Default">
        <name>$file_dst_name_body</name>
        <default/>
        <docblock>
          <description>Destination file name body (i.e. without extension)</description>
          <long-description/>
          <tag line="668" name="access" description="public"/>
          <tag line="668" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="682" package="Default">
        <name>$file_dst_name_ext</name>
        <default/>
        <docblock>
          <description>Destination file extension</description>
          <long-description/>
          <tag line="676" name="access" description="public"/>
          <tag line="676" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="690" package="Default">
        <name>$file_dst_pathname</name>
        <default/>
        <docblock>
          <description>Destination file name, including path</description>
          <long-description/>
          <tag line="684" name="access" description="public"/>
          <tag line="684" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="698" package="Default">
        <name>$image_src_x</name>
        <default/>
        <docblock>
          <description>Source image width</description>
          <long-description/>
          <tag line="692" name="access" description="public"/>
          <tag line="692" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="706" package="Default">
        <name>$image_src_y</name>
        <default/>
        <docblock>
          <description>Source image height</description>
          <long-description/>
          <tag line="700" name="access" description="public"/>
          <tag line="700" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="714" package="Default">
        <name>$image_src_bits</name>
        <default/>
        <docblock>
          <description>Source image color depth</description>
          <long-description/>
          <tag line="708" name="access" description="public"/>
          <tag line="708" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="722" package="Default">
        <name>$image_src_pixels</name>
        <default/>
        <docblock>
          <description>Number of pixels</description>
          <long-description/>
          <tag line="716" name="access" description="public"/>
          <tag line="716" name="var" description="" type="\long">
            <type by_reference="false">\long</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="730" package="Default">
        <name>$image_src_type</name>
        <default/>
        <docblock>
          <description>Type of image (png, gif, jpg or bmp)</description>
          <long-description/>
          <tag line="724" name="access" description="public"/>
          <tag line="724" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="738" package="Default">
        <name>$image_dst_x</name>
        <default/>
        <docblock>
          <description>Destination image width</description>
          <long-description/>
          <tag line="732" name="access" description="public"/>
          <tag line="732" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="746" package="Default">
        <name>$image_dst_y</name>
        <default/>
        <docblock>
          <description>Destination image height</description>
          <long-description/>
          <tag line="740" name="access" description="public"/>
          <tag line="740" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="754" package="Default">
        <name>$image_supported</name>
        <default/>
        <docblock>
          <description>Supported image formats</description>
          <long-description/>
          <tag line="748" name="access" description="private"/>
          <tag line="748" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="762" package="Default">
        <name>$file_is_image</name>
        <default/>
        <docblock>
          <description>Flag to determine if the source file is an image</description>
          <long-description/>
          <tag line="756" name="access" description="public"/>
          <tag line="756" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="772" package="Default">
        <name>$uploaded</name>
        <default/>
        <docblock>
          <description>Flag set after instanciating the class</description>
          <long-description>&lt;p&gt;Indicates if the file has been uploaded properly&lt;/p&gt;</long-description>
          <tag line="764" name="access" description="public"/>
          <tag line="764" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="787" package="Default">
        <name>$no_upload_check</name>
        <default/>
        <docblock>
          <description>Flag stopping PHP upload checks</description>
          <long-description>&lt;p&gt;Indicates whether we instanciated the class with a filename, in which case
we will not check on the validity of the PHP &lt;em&gt;upload&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This flag is automatically set to true when working on a local file&lt;/p&gt;

&lt;p&gt;Warning: for uploads, this flag MUST be set to false for security reason&lt;/p&gt;</long-description>
          <tag line="774" name="access" description="public"/>
          <tag line="774" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="797" package="Default">
        <name>$processed</name>
        <default/>
        <docblock>
          <description>Flag set after calling a process</description>
          <long-description>&lt;p&gt;Indicates if the processing, and copy of the resulting file went OK&lt;/p&gt;</long-description>
          <tag line="789" name="access" description="public"/>
          <tag line="789" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="805" package="Default">
        <name>$error</name>
        <default/>
        <docblock>
          <description>Holds eventual error message in plain english</description>
          <long-description/>
          <tag line="799" name="access" description="public"/>
          <tag line="799" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="813" package="Default">
        <name>$log</name>
        <default/>
        <docblock>
          <description>Holds an HTML formatted log</description>
          <long-description/>
          <tag line="807" name="access" description="public"/>
          <tag line="807" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="825" package="Default">
        <name>$file_new_name_body</name>
        <default/>
        <docblock>
          <description>Set this variable to replace the name body (i.e. without extension)</description>
          <long-description/>
          <tag line="819" name="access" description="public"/>
          <tag line="819" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="833" package="Default">
        <name>$file_name_body_add</name>
        <default/>
        <docblock>
          <description>Set this variable to append a string to the file name body</description>
          <long-description/>
          <tag line="827" name="access" description="public"/>
          <tag line="827" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="841" package="Default">
        <name>$file_name_body_pre</name>
        <default/>
        <docblock>
          <description>Set this variable to prepend a string to the file name body</description>
          <long-description/>
          <tag line="835" name="access" description="public"/>
          <tag line="835" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="849" package="Default">
        <name>$file_new_name_ext</name>
        <default/>
        <docblock>
          <description>Set this variable to change the file extension</description>
          <long-description/>
          <tag line="843" name="access" description="public"/>
          <tag line="843" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="857" package="Default">
        <name>$file_safe_name</name>
        <default/>
        <docblock>
          <description>Set this variable to format the filename (spaces changed to _)</description>
          <long-description/>
          <tag line="851" name="access" description="public"/>
          <tag line="851" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="868" package="Default">
        <name>$file_force_extension</name>
        <default/>
        <docblock>
          <description>Forces an extension if the source file doesn't have one</description>
          <long-description>&lt;p&gt;If the file is an image, then the correct extension will be added
Otherwise, a .txt extension will be chosen&lt;/p&gt;</long-description>
          <tag line="859" name="access" description="public"/>
          <tag line="859" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="878" package="Default">
        <name>$mime_check</name>
        <default/>
        <docblock>
          <description>Set this variable to false if you don't want to check the MIME against the allowed list</description>
          <long-description>&lt;p&gt;This variable is set to true by default for security reason&lt;/p&gt;</long-description>
          <tag line="870" name="access" description="public"/>
          <tag line="870" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="895" package="Default">
        <name>$mime_fileinfo</name>
        <default/>
        <docblock>
          <description>Set this variable to false in the init() function if you don't want to check the MIME
with Fileinfo PECL extension. On some systems, Fileinfo is known to be buggy, and you
may want to deactivate it in the class code directly.</description>
          <long-description>&lt;p&gt;You can also set it with the path of the magic database file.
If set to true, the class will try to read the MAGIC environment variable
  and if it is empty, will default to '/usr/share/file/magic'
If set to an empty string, it will call finfo_open without the path argument&lt;/p&gt;

&lt;p&gt;This variable is set to true by default for security reason&lt;/p&gt;</long-description>
          <tag line="880" name="access" description="public"/>
          <tag line="880" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="906" package="Default">
        <name>$mime_file</name>
        <default/>
        <docblock>
          <description>Set this variable to false in the init() function if you don't want to check the MIME
with UNIX file() command</description>
          <long-description>&lt;p&gt;This variable is set to true by default for security reason&lt;/p&gt;</long-description>
          <tag line="897" name="access" description="public"/>
          <tag line="897" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="920" package="Default">
        <name>$mime_magic</name>
        <default/>
        <docblock>
          <description>Set this variable to false in the init() function if you don't want to check the MIME
with the magic.mime file</description>
          <long-description>&lt;p&gt;The function mime_content_type() will be deprecated,
and this variable will be set to false in a future release&lt;/p&gt;

&lt;p&gt;This variable is set to true by default for security reason&lt;/p&gt;</long-description>
          <tag line="908" name="access" description="public"/>
          <tag line="908" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="934" package="Default">
        <name>$mime_getimagesize</name>
        <default/>
        <docblock>
          <description>Set this variable to false in the init() function if you don't want to check the MIME
with getimagesize()</description>
          <long-description>&lt;p&gt;The class tries to get a MIME type from getimagesize()
If no MIME is returned, it tries to guess the MIME type from the file type&lt;/p&gt;

&lt;p&gt;This variable is set to true by default for security reason&lt;/p&gt;</long-description>
          <tag line="922" name="access" description="public"/>
          <tag line="922" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="942" package="Default">
        <name>$no_script</name>
        <default/>
        <docblock>
          <description>Set this variable to false if you don't want to turn dangerous scripts into simple text files</description>
          <long-description/>
          <tag line="936" name="access" description="public"/>
          <tag line="936" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="959" package="Default">
        <name>$file_auto_rename</name>
        <default/>
        <docblock>
          <description>Set this variable to true to allow automatic renaming of the file
if the file already exists</description>
          <long-description>&lt;p&gt;Default value is true&lt;/p&gt;

&lt;p&gt;For instance, on uploading foo.ext,&lt;br&gt;
if foo.ext already exists, upload will be renamed foo_1.ext&lt;br&gt;
and if foo_1.ext already exists, upload will be renamed foo_2.ext&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Note that this option doesn't have any effect if {@link file_overwrite} is true&lt;/p&gt;</long-description>
          <tag line="944" name="access" description="public"/>
          <tag line="944" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="970" package="Default">
        <name>$dir_auto_create</name>
        <default/>
        <docblock>
          <description>Set this variable to true to allow automatic creation of the destination
directory if it is missing (works recursively)</description>
          <long-description>&lt;p&gt;Default value is true&lt;/p&gt;</long-description>
          <tag line="961" name="access" description="public"/>
          <tag line="961" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="981" package="Default">
        <name>$dir_auto_chmod</name>
        <default/>
        <docblock>
          <description>Set this variable to true to allow automatic chmod of the destination
directory if it is not writeable</description>
          <long-description>&lt;p&gt;Default value is true&lt;/p&gt;</long-description>
          <tag line="972" name="access" description="public"/>
          <tag line="972" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="992" package="Default">
        <name>$dir_chmod</name>
        <default/>
        <docblock>
          <description>Set this variable to the default chmod you want the class to use
when creating directories, or attempting to write in a directory</description>
          <long-description>&lt;p&gt;Default value is 0777 (without quotes)&lt;/p&gt;</long-description>
          <tag line="983" name="access" description="public"/>
          <tag line="983" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1002" package="Default">
        <name>$file_overwrite</name>
        <default/>
        <docblock>
          <description>Set this variable tu true to allow overwriting of an existing file</description>
          <long-description>&lt;p&gt;Default value is false, so no files will be overwritten&lt;/p&gt;</long-description>
          <tag line="994" name="access" description="public"/>
          <tag line="994" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1015" package="Default">
        <name>$file_max_size</name>
        <default/>
        <docblock>
          <description>Set this variable to change the maximum size in bytes for an uploaded file</description>
          <long-description>&lt;p&gt;Default value is the value &lt;i&gt;upload_max_filesize&lt;/i&gt; from php.ini&lt;/p&gt;

&lt;p&gt;Value in bytes (integer) or shorthand byte values (string) is allowed.
The available options are K (for Kilobytes), M (for Megabytes) and G (for Gigabytes)&lt;/p&gt;</long-description>
          <tag line="1004" name="access" description="public"/>
          <tag line="1004" name="var" description="" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1027" package="Default">
        <name>$image_resize</name>
        <default/>
        <docblock>
          <description>Set this variable to true to resize the file if it is an image</description>
          <long-description>&lt;p&gt;You will probably want to set {@link image_x} and {@link image_y}, and maybe one of the ratio variables&lt;/p&gt;

&lt;p&gt;Default value is false (no resizing)&lt;/p&gt;</long-description>
          <tag line="1017" name="access" description="public"/>
          <tag line="1017" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1040" package="Default">
        <name>$image_convert</name>
        <default/>
        <docblock>
          <description>Set this variable to convert the file if it is an image</description>
          <long-description>&lt;p&gt;Possibles values are : ''; 'png'; 'jpeg'; 'gif'; 'bmp'&lt;/p&gt;

&lt;p&gt;Default value is '' (no conversion)&lt;br&gt;
If {@link resize} is true, {@link convert} will be set to the source file extension&lt;/p&gt;</long-description>
          <tag line="1029" name="access" description="public"/>
          <tag line="1029" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1050" package="Default">
        <name>$image_x</name>
        <default/>
        <docblock>
          <description>Set this variable to the wanted (or maximum/minimum) width for the processed image, in pixels</description>
          <long-description>&lt;p&gt;Default value is 150&lt;/p&gt;</long-description>
          <tag line="1042" name="access" description="public"/>
          <tag line="1042" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1060" package="Default">
        <name>$image_y</name>
        <default/>
        <docblock>
          <description>Set this variable to the wanted (or maximum/minimum) height for the processed image, in pixels</description>
          <long-description>&lt;p&gt;Default value is 150&lt;/p&gt;</long-description>
          <tag line="1052" name="access" description="public"/>
          <tag line="1052" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1070" package="Default">
        <name>$image_ratio</name>
        <default/>
        <docblock>
          <description>Set this variable to keep the original size ratio to fit within {@link image_x} x {@link image_y}</description>
          <long-description>&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1062" name="access" description="public"/>
          <tag line="1062" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1086" package="Default">
        <name>$image_ratio_crop</name>
        <default/>
        <docblock>
          <description>Set this variable to keep the original size ratio to fit within {@link image_x} x {@link image_y}</description>
          <long-description>&lt;p&gt;The image will be resized as to fill the whole space, and excedent will be cropped&lt;/p&gt;

&lt;p&gt;Value can also be a string, one or more character from 'TBLR' (top, bottom, left and right)
If set as a string, it determines which side of the image is kept while cropping.
By default, the part of the image kept is in the center, i.e. it crops equally on both sides&lt;/p&gt;

&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1072" name="access" description="public"/>
          <tag line="1072" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1103" package="Default">
        <name>$image_ratio_fill</name>
        <default/>
        <docblock>
          <description>Set this variable to keep the original size ratio to fit within {@link image_x} x {@link image_y}</description>
          <long-description>&lt;p&gt;The image will be resized to fit entirely in the space, and the rest will be colored.
The default color is white, but can be set with {@link image_default_color}&lt;/p&gt;

&lt;p&gt;Value can also be a string, one or more character from 'TBLR' (top, bottom, left and right)
If set as a string, it determines in which side of the space the image is displayed.
By default, the image is displayed in the center, i.e. it fills the remaining space equally on both sides&lt;/p&gt;

&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1088" name="access" description="public"/>
          <tag line="1088" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1116" package="Default">
        <name>$image_ratio_pixels</name>
        <default/>
        <docblock>
          <description>Set this variable to a number of pixels so that {@link image_x} and {@link image_y} are the best match possible</description>
          <long-description>&lt;p&gt;The image will be resized to have approximatively the number of pixels
The aspect ratio wil be conserved&lt;/p&gt;

&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1105" name="access" description="public"/>
          <tag line="1105" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1127" package="Default">
        <name>$image_ratio_no_zoom_in</name>
        <default/>
        <docblock>
          <description>Set this variable to keep the original size ratio to fit within {@link image_x} x {@link image_y},
but only if original image is bigger</description>
          <long-description>&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1118" name="access" description="public"/>
          <tag line="1118" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1138" package="Default">
        <name>$image_ratio_no_zoom_out</name>
        <default/>
        <docblock>
          <description>Set this variable to keep the original size ratio to fit within {@link image_x} x {@link image_y},
but only if original image is smaller</description>
          <long-description>&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1129" name="access" description="public"/>
          <tag line="1129" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1148" package="Default">
        <name>$image_ratio_x</name>
        <default/>
        <docblock>
          <description>Set this variable to calculate {@link image_x} automatically , using {@link image_y} and conserving ratio</description>
          <long-description>&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1140" name="access" description="public"/>
          <tag line="1140" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1158" package="Default">
        <name>$image_ratio_y</name>
        <default/>
        <docblock>
          <description>Set this variable to calculate {@link image_y} automatically , using {@link image_x} and conserving ratio</description>
          <long-description>&lt;p&gt;Default value is false&lt;/p&gt;</long-description>
          <tag line="1150" name="access" description="public"/>
          <tag line="1150" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1168" package="Default">
        <name>$image_max_width</name>
        <default/>
        <docblock>
          <description>Set this variable to set a maximum image width, above which the upload will be invalid</description>
          <long-description>&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1160" name="access" description="public"/>
          <tag line="1160" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1178" package="Default">
        <name>$image_max_height</name>
        <default/>
        <docblock>
          <description>Set this variable to set a maximum image height, above which the upload will be invalid</description>
          <long-description>&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1170" name="access" description="public"/>
          <tag line="1170" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1188" package="Default">
        <name>$image_max_pixels</name>
        <default/>
        <docblock>
          <description>Set this variable to set a maximum number of pixels for an image, above which the upload will be invalid</description>
          <long-description>&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1180" name="access" description="public"/>
          <tag line="1180" name="var" description="" type="\long">
            <type by_reference="false">\long</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1200" package="Default">
        <name>$image_max_ratio</name>
        <default/>
        <docblock>
          <description>Set this variable to set a maximum image aspect ratio, above which the upload will be invalid</description>
          <long-description>&lt;p&gt;Note that ratio = width / height&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1190" name="access" description="public"/>
          <tag line="1190" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1210" package="Default">
        <name>$image_min_width</name>
        <default/>
        <docblock>
          <description>Set this variable to set a minimum image width, below which the upload will be invalid</description>
          <long-description>&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1202" name="access" description="public"/>
          <tag line="1202" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1220" package="Default">
        <name>$image_min_height</name>
        <default/>
        <docblock>
          <description>Set this variable to set a minimum image height, below which the upload will be invalid</description>
          <long-description>&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1212" name="access" description="public"/>
          <tag line="1212" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1230" package="Default">
        <name>$image_min_pixels</name>
        <default/>
        <docblock>
          <description>Set this variable to set a minimum number of pixels for an image, below which the upload will be invalid</description>
          <long-description>&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1222" name="access" description="public"/>
          <tag line="1222" name="var" description="" type="\long">
            <type by_reference="false">\long</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1242" package="Default">
        <name>$image_min_ratio</name>
        <default/>
        <docblock>
          <description>Set this variable to set a minimum image aspect ratio, below which the upload will be invalid</description>
          <long-description>&lt;p&gt;Note that ratio = width / height&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1232" name="access" description="public"/>
          <tag line="1232" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1252" package="Default">
        <name>$jpeg_quality</name>
        <default/>
        <docblock>
          <description>Quality of JPEG created/converted destination image</description>
          <long-description>&lt;p&gt;Default value is 85&lt;/p&gt;</long-description>
          <tag line="1244" name="access" description="public"/>
          <tag line="1244" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1268" package="Default">
        <name>$jpeg_size</name>
        <default/>
        <docblock>
          <description>Determines the quality of the JPG image to fit a desired file size</description>
          <long-description>&lt;p&gt;The JPG quality will be set between 1 and 100%
The calculations are approximations.&lt;/p&gt;

&lt;p&gt;Value in bytes (integer) or shorthand byte values (string) is allowed.
The available options are K (for Kilobytes), M (for Megabytes) and G (for Gigabytes)&lt;/p&gt;

&lt;p&gt;Default value is null (no calculations)&lt;/p&gt;</long-description>
          <tag line="1254" name="access" description="public"/>
          <tag line="1254" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1279" package="Default">
        <name>$preserve_transparency</name>
        <default/>
        <docblock>
          <description>Preserve transparency when resizing or converting an image (deprecated)</description>
          <long-description>&lt;p&gt;Default value is automatically set to true for transparent GIFs
This setting is now deprecated&lt;/p&gt;</long-description>
          <tag line="1270" name="access" description="public"/>
          <tag line="1270" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1289" package="Default">
        <name>$image_is_transparent</name>
        <default/>
        <docblock>
          <description>Flag set to true when the image is transparent</description>
          <long-description>&lt;p&gt;This is actually used only for transparent GIFs&lt;/p&gt;</long-description>
          <tag line="1281" name="access" description="public"/>
          <tag line="1281" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1299" package="Default">
        <name>$image_transparent_color</name>
        <default/>
        <docblock>
          <description>Transparent color in a palette</description>
          <long-description>&lt;p&gt;This is actually used only for transparent GIFs&lt;/p&gt;</long-description>
          <tag line="1291" name="access" description="public"/>
          <tag line="1291" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1314" package="Default">
        <name>$image_background_color</name>
        <default/>
        <docblock>
          <description>Background color, used to paint transparent areas with</description>
          <long-description>&lt;p&gt;If set, it will forcibly remove transparency by painting transparent areas with the color
This setting will fill in all transparent areas in PNG and GIF, as opposed to {@link image_default_color}
which will do so only in BMP, JPEG, and alpha transparent areas in transparent GIFs
This setting overrides {@link image_default_color}&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1301" name="access" description="public"/>
          <tag line="1301" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1330" package="Default">
        <name>$image_default_color</name>
        <default/>
        <docblock>
          <description>Default color for non alpha-transparent images</description>
          <long-description>&lt;p&gt;This setting is to be used to define a background color for semi transparent areas
of an alpha transparent when the output format doesn't support alpha transparency
This is useful when, from an alpha transparent PNG image, or an image with alpha transparent features
if you want to output it as a transparent GIFs for instance, you can set a blending color for transparent areas
If you output in JPEG or BMP, this color will be used to fill in the previously transparent areas&lt;/p&gt;

&lt;p&gt;The default color white&lt;/p&gt;</long-description>
          <tag line="1316" name="access" description="public"/>
          <tag line="1316" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1338" package="Default">
        <name>$image_is_palette</name>
        <default/>
        <docblock>
          <description>Flag set to true when the image is not true color</description>
          <long-description/>
          <tag line="1332" name="access" description="public"/>
          <tag line="1332" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1350" package="Default">
        <name>$image_brightness</name>
        <default/>
        <docblock>
          <description>Corrects the image brightness</description>
          <long-description>&lt;p&gt;Value can range between -127 and 127&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1340" name="access" description="public"/>
          <tag line="1340" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1362" package="Default">
        <name>$image_contrast</name>
        <default/>
        <docblock>
          <description>Corrects the image contrast</description>
          <long-description>&lt;p&gt;Value can range between -127 and 127&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1352" name="access" description="public"/>
          <tag line="1352" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1374" package="Default">
        <name>$image_opacity</name>
        <default/>
        <docblock>
          <description>Changes the image opacity</description>
          <long-description>&lt;p&gt;Value can range between 0 and 100&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1364" name="access" description="public"/>
          <tag line="1364" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1386" package="Default">
        <name>$image_threshold</name>
        <default/>
        <docblock>
          <description>Applies threshold filter</description>
          <long-description>&lt;p&gt;Value can range between -127 and 127&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1376" name="access" description="public"/>
          <tag line="1376" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1398" package="Default">
        <name>$image_tint_color</name>
        <default/>
        <docblock>
          <description>Applies a tint on the image</description>
          <long-description>&lt;p&gt;Value is an hexadecimal color, such as #FFFFFF&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1388" name="access" description="public"/>
          <tag line="1388" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1412" package="Default">
        <name>$image_overlay_color</name>
        <default/>
        <docblock>
          <description>Applies a colored overlay on the image</description>
          <long-description>&lt;p&gt;Value is an hexadecimal color, such as #FFFFFF&lt;/p&gt;

&lt;p&gt;To use with {@link image_overlay_opacity}&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1400" name="access" description="public"/>
          <tag line="1400" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1426" package="Default">
        <name>$image_overlay_opacity</name>
        <default/>
        <docblock>
          <description>Sets the opacity for the colored overlay</description>
          <long-description>&lt;p&gt;Value is a percentage, as an integer between 0 (transparent) and 100 (opaque)&lt;/p&gt;

&lt;p&gt;Unless used with {@link image_overlay_color}, this setting has no effect&lt;/p&gt;

&lt;p&gt;Default value is 50&lt;/p&gt;</long-description>
          <tag line="1414" name="access" description="public"/>
          <tag line="1414" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1434" package="Default">
        <name>$image_overlay_percent</name>
        <default/>
        <docblock>
          <description>Soon to be deprecated old form of {@link image_overlay_opacity}</description>
          <long-description/>
          <tag line="1428" name="access" description="public"/>
          <tag line="1428" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1444" package="Default">
        <name>$image_negative</name>
        <default/>
        <docblock>
          <description>Inverts the color of an image</description>
          <long-description>&lt;p&gt;Default value is FALSE&lt;/p&gt;</long-description>
          <tag line="1436" name="access" description="public"/>
          <tag line="1436" name="var" description="" type="\boolean;">
            <type by_reference="false">\boolean;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1454" package="Default">
        <name>$image_greyscale</name>
        <default/>
        <docblock>
          <description>Turns the image into greyscale</description>
          <long-description>&lt;p&gt;Default value is FALSE&lt;/p&gt;</long-description>
          <tag line="1446" name="access" description="public"/>
          <tag line="1446" name="var" description="" type="\boolean;">
            <type by_reference="false">\boolean;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1466" package="Default">
        <name>$image_unsharp</name>
        <default/>
        <docblock>
          <description>Applies an unsharp mask, with alpha transparency support</description>
          <long-description>&lt;p&gt;Beware that this unsharp mask is quite resource-intensive&lt;/p&gt;

&lt;p&gt;Default value is FALSE&lt;/p&gt;</long-description>
          <tag line="1456" name="access" description="public"/>
          <tag line="1456" name="var" description="" type="\boolean;">
            <type by_reference="false">\boolean;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1480" package="Default">
        <name>$image_unsharp_amount</name>
        <default/>
        <docblock>
          <description>Sets the unsharp mask amount</description>
          <long-description>&lt;p&gt;Value is an integer between 0 and 500, typically between 50 and 200&lt;/p&gt;

&lt;p&gt;Unless used with {@link image_unsharp}, this setting has no effect&lt;/p&gt;

&lt;p&gt;Default value is 80&lt;/p&gt;</long-description>
          <tag line="1468" name="access" description="public"/>
          <tag line="1468" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1494" package="Default">
        <name>$image_unsharp_radius</name>
        <default/>
        <docblock>
          <description>Sets the unsharp mask radius</description>
          <long-description>&lt;p&gt;Value is an integer between 0 and 50, typically between 0.5 and 1&lt;/p&gt;

&lt;p&gt;Unless used with {@link image_unsharp}, this setting has no effect&lt;/p&gt;

&lt;p&gt;Default value is 0.5&lt;/p&gt;</long-description>
          <tag line="1482" name="access" description="public"/>
          <tag line="1482" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1508" package="Default">
        <name>$image_unsharp_threshold</name>
        <default/>
        <docblock>
          <description>Sets the unsharp mask threshold</description>
          <long-description>&lt;p&gt;Value is an integer between 0 and 255, typically between 0 and 5&lt;/p&gt;

&lt;p&gt;Unless used with {@link image_unsharp}, this setting has no effect&lt;/p&gt;

&lt;p&gt;Default value is 1&lt;/p&gt;</long-description>
          <tag line="1496" name="access" description="public"/>
          <tag line="1496" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1534" package="Default">
        <name>$image_text</name>
        <default/>
        <docblock>
          <description>Adds a text label on the image</description>
          <long-description>&lt;p&gt;Value is a string, any text. Text will not word-wrap, although you can use breaklines in your text "\n"&lt;/p&gt;

&lt;p&gt;If set, this setting allow the use of all other settings starting with image_text_&lt;/p&gt;

&lt;p&gt;Replacement tokens can be used in the string:&lt;/p&gt;

&lt;pre&gt;
gd_version    src_name       src_name_body src_name_ext
src_pathname  src_mime       src_x         src_y
src_type      src_bits       src_pixels
src_size      src_size_kb    src_size_mb   src_size_human
dst_path      dst_name_body  dst_pathname
dst_name      dst_name_ext   dst_x         dst_y
date          time           host          server        ip
&lt;/pre&gt;

&lt;p&gt;The tokens must be enclosed in square brackets: [dst_x] will be replaced by the width of the picture&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="1510" name="access" description="public"/>
          <tag line="1510" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1546" package="Default">
        <name>$image_text_direction</name>
        <default/>
        <docblock>
          <description>Sets the text direction for the text label</description>
          <long-description>&lt;p&gt;Value is either 'h' or 'v', as in horizontal and vertical&lt;/p&gt;

&lt;p&gt;Default value is h (horizontal)&lt;/p&gt;</long-description>
          <tag line="1536" name="access" description="public"/>
          <tag line="1536" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1558" package="Default">
        <name>$image_text_color</name>
        <default/>
        <docblock>
          <description>Sets the text color for the text label</description>
          <long-description>&lt;p&gt;Value is an hexadecimal color, such as #FFFFFF&lt;/p&gt;

&lt;p&gt;Default value is #FFFFFF (white)&lt;/p&gt;</long-description>
          <tag line="1548" name="access" description="public"/>
          <tag line="1548" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1570" package="Default">
        <name>$image_text_opacity</name>
        <default/>
        <docblock>
          <description>Sets the text opacity in the text label</description>
          <long-description>&lt;p&gt;Value is a percentage, as an integer between 0 (transparent) and 100 (opaque)&lt;/p&gt;

&lt;p&gt;Default value is 100&lt;/p&gt;</long-description>
          <tag line="1560" name="access" description="public"/>
          <tag line="1560" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1578" package="Default">
        <name>$image_text_percent</name>
        <default/>
        <docblock>
          <description>Soon to be deprecated old form of {@link image_text_opacity}</description>
          <long-description/>
          <tag line="1572" name="access" description="public"/>
          <tag line="1572" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1590" package="Default">
        <name>$image_text_background</name>
        <default/>
        <docblock>
          <description>Sets the text background color for the text label</description>
          <long-description>&lt;p&gt;Value is an hexadecimal color, such as #FFFFFF&lt;/p&gt;

&lt;p&gt;Default value is null (no background)&lt;/p&gt;</long-description>
          <tag line="1580" name="access" description="public"/>
          <tag line="1580" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1602" package="Default">
        <name>$image_text_background_opacity</name>
        <default/>
        <docblock>
          <description>Sets the text background opacity in the text label</description>
          <long-description>&lt;p&gt;Value is a percentage, as an integer between 0 (transparent) and 100 (opaque)&lt;/p&gt;

&lt;p&gt;Default value is 100&lt;/p&gt;</long-description>
          <tag line="1592" name="access" description="public"/>
          <tag line="1592" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1610" package="Default">
        <name>$image_text_background_percent</name>
        <default/>
        <docblock>
          <description>Soon to be deprecated old form of {@link image_text_background_opacity}</description>
          <long-description/>
          <tag line="1604" name="access" description="public"/>
          <tag line="1604" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1623" package="Default">
        <name>$image_text_font</name>
        <default/>
        <docblock>
          <description>Sets the text font in the text label</description>
          <long-description>&lt;p&gt;Value is a an integer between 1 and 5 for GD built-in fonts. 1 is the smallest font, 5 the biggest
Value can also be a string, which represents the path to a GDF font. The font will be loaded into GD, and used as a built-in font.&lt;/p&gt;

&lt;p&gt;Default value is 5&lt;/p&gt;</long-description>
          <tag line="1612" name="access" description="public"/>
          <tag line="1612" name="var" description="" type="\mixed;">
            <type by_reference="false">\mixed;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1644" package="Default">
        <name>$image_text_position</name>
        <default/>
        <docblock>
          <description>Sets the text label position within the image</description>
          <long-description>&lt;p&gt;Value is one or two out of 'TBLR' (top, bottom, left, right)&lt;/p&gt;

&lt;p&gt;The positions are as following:&lt;/p&gt;

&lt;pre&gt;
                       TL  T  TR
                       L       R
                       BL  B  BR
&lt;/pre&gt;

&lt;p&gt;Default value is null (centered, horizontal and vertical)&lt;/p&gt;

&lt;p&gt;Note that is {@link image_text_x} and {@link image_text_y} are used, this setting has no effect&lt;/p&gt;</long-description>
          <tag line="1625" name="access" description="public"/>
          <tag line="1625" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1657" package="Default">
        <name>$image_text_x</name>
        <default/>
        <docblock>
          <description>Sets the text label absolute X position within the image</description>
          <long-description>&lt;p&gt;Value is in pixels, representing the distance between the left of the image and the label
If a negative value is used, it will represent the distance between the right of the image and the label&lt;/p&gt;

&lt;p&gt;Default value is null (so {@link image_text_position} is used)&lt;/p&gt;</long-description>
          <tag line="1646" name="access" description="public"/>
          <tag line="1646" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1670" package="Default">
        <name>$image_text_y</name>
        <default/>
        <docblock>
          <description>Sets the text label absolute Y position within the image</description>
          <long-description>&lt;p&gt;Value is in pixels, representing the distance between the top of the image and the label
If a negative value is used, it will represent the distance between the bottom of the image and the label&lt;/p&gt;

&lt;p&gt;Default value is null (so {@link image_text_position} is used)&lt;/p&gt;</long-description>
          <tag line="1659" name="access" description="public"/>
          <tag line="1659" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1684" package="Default">
        <name>$image_text_padding</name>
        <default/>
        <docblock>
          <description>Sets the text label padding</description>
          <long-description>&lt;p&gt;Value is in pixels, representing the distance between the text and the label background border&lt;/p&gt;

&lt;p&gt;Default value is 0&lt;/p&gt;

&lt;p&gt;This setting can be overriden by {@link image_text_padding_x} and {@link image_text_padding_y}&lt;/p&gt;</long-description>
          <tag line="1672" name="access" description="public"/>
          <tag line="1672" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1698" package="Default">
        <name>$image_text_padding_x</name>
        <default/>
        <docblock>
          <description>Sets the text label horizontal padding</description>
          <long-description>&lt;p&gt;Value is in pixels, representing the distance between the text and the left and right label background borders&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;

&lt;p&gt;If set, this setting overrides the horizontal part of {@link image_text_padding}&lt;/p&gt;</long-description>
          <tag line="1686" name="access" description="public"/>
          <tag line="1686" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1712" package="Default">
        <name>$image_text_padding_y</name>
        <default/>
        <docblock>
          <description>Sets the text label vertical padding</description>
          <long-description>&lt;p&gt;Value is in pixels, representing the distance between the text and the top and bottom label background borders&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;

&lt;p&gt;If set, his setting overrides the vertical part of {@link image_text_padding}&lt;/p&gt;</long-description>
          <tag line="1700" name="access" description="public"/>
          <tag line="1700" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1726" package="Default">
        <name>$image_text_alignment</name>
        <default/>
        <docblock>
          <description>Sets the text alignment</description>
          <long-description>&lt;p&gt;Value is a string, which can be either 'L', 'C' or 'R'&lt;/p&gt;

&lt;p&gt;Default value is 'C'&lt;/p&gt;

&lt;p&gt;This setting is relevant only if the text has several lines.&lt;/p&gt;</long-description>
          <tag line="1714" name="access" description="public"/>
          <tag line="1714" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1740" package="Default">
        <name>$image_text_line_spacing</name>
        <default/>
        <docblock>
          <description>Sets the text line spacing</description>
          <long-description>&lt;p&gt;Value is an integer, in pixels&lt;/p&gt;

&lt;p&gt;Default value is 0&lt;/p&gt;

&lt;p&gt;This setting is relevant only if the text has several lines.&lt;/p&gt;</long-description>
          <tag line="1728" name="access" description="public"/>
          <tag line="1728" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1753" package="Default">
        <name>$image_reflection_height</name>
        <default/>
        <docblock>
          <description>Sets the height of the reflection</description>
          <long-description>&lt;p&gt;Value is an integer in pixels, or a string which format can be in pixels or percentage.
For instance, values can be : 40, '40', '40px' or '40%'&lt;/p&gt;

&lt;p&gt;Default value is null, no reflection&lt;/p&gt;</long-description>
          <tag line="1742" name="access" description="public"/>
          <tag line="1742" name="var" description="" type="\mixed;">
            <type by_reference="false">\mixed;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1767" package="Default">
        <name>$image_reflection_space</name>
        <default/>
        <docblock>
          <description>Sets the space between the source image and its relection</description>
          <long-description>&lt;p&gt;Value is an integer in pixels, which can be negative&lt;/p&gt;

&lt;p&gt;Default value is 2&lt;/p&gt;

&lt;p&gt;This setting is relevant only if {@link image_reflection_height} is set&lt;/p&gt;</long-description>
          <tag line="1755" name="access" description="public"/>
          <tag line="1755" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1783" package="Default">
        <name>$image_reflection_color</name>
        <default/>
        <docblock>
          <description>Sets the color of the reflection background (deprecated)</description>
          <long-description>&lt;p&gt;Value is an hexadecimal color, such as #FFFFFF&lt;/p&gt;

&lt;p&gt;Default value is #FFFFFF&lt;/p&gt;

&lt;p&gt;This setting is relevant only if {@link image_reflection_height} is set&lt;/p&gt;

&lt;p&gt;This setting is now deprecated in favor of {@link image_default_color}&lt;/p&gt;</long-description>
          <tag line="1769" name="access" description="public"/>
          <tag line="1769" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1798" package="Default">
        <name>$image_reflection_opacity</name>
        <default/>
        <docblock>
          <description>Sets the initial opacity of the reflection</description>
          <long-description>&lt;p&gt;Value is an integer between 0 (no opacity) and 100 (full opacity).
The reflection will start from {@link image_reflection_opacity} and end up at 0&lt;/p&gt;

&lt;p&gt;Default value is 60&lt;/p&gt;

&lt;p&gt;This setting is relevant only if {@link image_reflection_height} is set&lt;/p&gt;</long-description>
          <tag line="1785" name="access" description="public"/>
          <tag line="1785" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1810" package="Default">
        <name>$image_flip</name>
        <default/>
        <docblock>
          <description>Flips the image vertically or horizontally</description>
          <long-description>&lt;p&gt;Value is either 'h' or 'v', as in horizontal and vertical&lt;/p&gt;

&lt;p&gt;Default value is null (no flip)&lt;/p&gt;</long-description>
          <tag line="1800" name="access" description="public"/>
          <tag line="1800" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1822" package="Default">
        <name>$image_rotate</name>
        <default/>
        <docblock>
          <description>Rotates the image by increments of 45 degrees</description>
          <long-description>&lt;p&gt;Value is either 90, 180 or 270&lt;/p&gt;

&lt;p&gt;Default value is null (no rotation)&lt;/p&gt;</long-description>
          <tag line="1812" name="access" description="public"/>
          <tag line="1812" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1852" package="Default">
        <name>$image_crop</name>
        <default/>
        <docblock>
          <description>Crops an image</description>
          <long-description>&lt;p&gt;Values are four dimensions, or two, or one (CSS style)
They represent the amount cropped top, right, bottom and left.
These values can either be in an array, or a space separated string.
Each value can be in pixels (with or without 'px'), or percentage (of the source image)&lt;/p&gt;

&lt;p&gt;For instance, are valid:&lt;/p&gt;

&lt;pre&gt;
$foo-&gt;image_crop = 20                  OR array(20);
$foo-&gt;image_crop = '20px'              OR array('20px');
$foo-&gt;image_crop = '20 40'             OR array('20', 40);
$foo-&gt;image_crop = '-20 25%'           OR array(-20, '25%');
$foo-&gt;image_crop = '20px 25%'          OR array('20px', '25%');
$foo-&gt;image_crop = '20% 25%'           OR array('20%', '25%');
$foo-&gt;image_crop = '20% 25% 10% 30%'   OR array('20%', '25%', '10%', '30%');
$foo-&gt;image_crop = '20px 25px 2px 2px' OR array('20px', '25%px', '2px', '2px');
$foo-&gt;image_crop = '20 25% 40px 10%'   OR array(20, '25%', '40px', '10%');
&lt;/pre&gt;

&lt;p&gt;If a value is negative, the image will be expanded, and the extra parts will be filled with black&lt;/p&gt;

&lt;p&gt;Default value is null (no cropping)&lt;/p&gt;</long-description>
          <tag line="1824" name="access" description="public"/>
          <tag line="1824" name="var" description="OR array;" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1864" package="Default">
        <name>$image_precrop</name>
        <default/>
        <docblock>
          <description>Crops an image, before an eventual resizing</description>
          <long-description>&lt;p&gt;See {@link image_crop} for valid formats&lt;/p&gt;

&lt;p&gt;Default value is null (no cropping)&lt;/p&gt;</long-description>
          <tag line="1854" name="access" description="public"/>
          <tag line="1854" name="var" description="OR array;" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1878" package="Default">
        <name>$image_bevel</name>
        <default/>
        <docblock>
          <description>Adds a bevel border on the image</description>
          <long-description>&lt;p&gt;Value is a positive integer, representing the thickness of the bevel&lt;/p&gt;

&lt;p&gt;If the bevel colors are the same as the background, it makes a fade out effect&lt;/p&gt;

&lt;p&gt;Default value is null (no bevel)&lt;/p&gt;</long-description>
          <tag line="1866" name="access" description="public"/>
          <tag line="1866" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1891" package="Default">
        <name>$image_bevel_color1</name>
        <default/>
        <docblock>
          <description>Top and left bevel color</description>
          <long-description>&lt;p&gt;Value is a color, in hexadecimal format
This setting is used only if {@link image_bevel} is set&lt;/p&gt;

&lt;p&gt;Default value is #FFFFFF&lt;/p&gt;</long-description>
          <tag line="1880" name="access" description="public"/>
          <tag line="1880" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1904" package="Default">
        <name>$image_bevel_color2</name>
        <default/>
        <docblock>
          <description>Right and bottom bevel color</description>
          <long-description>&lt;p&gt;Value is a color, in hexadecimal format
This setting is used only if {@link image_bevel} is set&lt;/p&gt;

&lt;p&gt;Default value is #000000&lt;/p&gt;</long-description>
          <tag line="1893" name="access" description="public"/>
          <tag line="1893" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1924" package="Default">
        <name>$image_border</name>
        <default/>
        <docblock>
          <description>Adds a single-color border on the outer of the image</description>
          <long-description>&lt;p&gt;Values are four dimensions, or two, or one (CSS style)
They represent the border thickness top, right, bottom and left.
These values can either be in an array, or a space separated string.
Each value can be in pixels (with or without 'px'), or percentage (of the source image)&lt;/p&gt;

&lt;p&gt;See {@link image_crop} for valid formats&lt;/p&gt;

&lt;p&gt;If a value is negative, the image will be cropped.
Note that the dimensions of the picture will be increased by the borders' thickness&lt;/p&gt;

&lt;p&gt;Default value is null (no border)&lt;/p&gt;</long-description>
          <tag line="1906" name="access" description="public"/>
          <tag line="1906" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1937" package="Default">
        <name>$image_border_color</name>
        <default/>
        <docblock>
          <description>Border color</description>
          <long-description>&lt;p&gt;Value is a color, in hexadecimal format.
This setting is used only if {@link image_border} is set&lt;/p&gt;

&lt;p&gt;Default value is #FFFFFF&lt;/p&gt;</long-description>
          <tag line="1926" name="access" description="public"/>
          <tag line="1926" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1951" package="Default">
        <name>$image_border_opacity</name>
        <default/>
        <docblock>
          <description>Sets the opacity for the borders</description>
          <long-description>&lt;p&gt;Value is a percentage, as an integer between 0 (transparent) and 100 (opaque)&lt;/p&gt;

&lt;p&gt;Unless used with {@link image_border}, this setting has no effect&lt;/p&gt;

&lt;p&gt;Default value is 100&lt;/p&gt;</long-description>
          <tag line="1939" name="access" description="public"/>
          <tag line="1939" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1970" package="Default">
        <name>$image_border_transparent</name>
        <default/>
        <docblock>
          <description>Adds a fading-to-transparent border on the image</description>
          <long-description>&lt;p&gt;Values are four dimensions, or two, or one (CSS style)
They represent the border thickness top, right, bottom and left.
These values can either be in an array, or a space separated string.
Each value can be in pixels (with or without 'px'), or percentage (of the source image)&lt;/p&gt;

&lt;p&gt;See {@link image_crop} for valid formats&lt;/p&gt;

&lt;p&gt;Note that the dimensions of the picture will not be increased by the borders' thickness&lt;/p&gt;

&lt;p&gt;Default value is null (no border)&lt;/p&gt;</long-description>
          <tag line="1953" name="access" description="public"/>
          <tag line="1953" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="1988" package="Default">
        <name>$image_frame</name>
        <default/>
        <docblock>
          <description>Adds a multi-color frame on the outer of the image</description>
          <long-description>&lt;p&gt;Value is an integer. Two values are possible for now:
1 for flat border, meaning that the frame is mirrored horizontally and vertically
2 for crossed border, meaning that the frame will be inversed, as in a bevel effect&lt;/p&gt;

&lt;p&gt;The frame will be composed of colored lines set in {@link image_frame_colors}&lt;/p&gt;

&lt;p&gt;Note that the dimensions of the picture will be increased by the borders' thickness&lt;/p&gt;

&lt;p&gt;Default value is null (no frame)&lt;/p&gt;</long-description>
          <tag line="1972" name="access" description="public"/>
          <tag line="1972" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2011" package="Default">
        <name>$image_frame_colors</name>
        <default/>
        <docblock>
          <description>Sets the colors used to draw a frame</description>
          <long-description>&lt;p&gt;Values is a list of n colors in hexadecimal format.
These values can either be in an array, or a space separated string.&lt;/p&gt;

&lt;p&gt;The colors are listed in the following order: from the outset of the image to its center&lt;/p&gt;

&lt;p&gt;For instance, are valid:&lt;/p&gt;

&lt;pre&gt;
$foo-&gt;image_frame_colors = '#FFFFFF #999999 #666666 #000000';
$foo-&gt;image_frame_colors = array('#FFFFFF', '#999999', '#666666', '#000000');
&lt;/pre&gt;

&lt;p&gt;This setting is used only if {@link image_frame} is set&lt;/p&gt;

&lt;p&gt;Default value is '#FFFFFF #999999 #666666 #000000'&lt;/p&gt;</long-description>
          <tag line="1990" name="access" description="public"/>
          <tag line="1990" name="var" description="OR array;" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2025" package="Default">
        <name>$image_frame_opacity</name>
        <default/>
        <docblock>
          <description>Sets the opacity for the frame</description>
          <long-description>&lt;p&gt;Value is a percentage, as an integer between 0 (transparent) and 100 (opaque)&lt;/p&gt;

&lt;p&gt;Unless used with {@link image_frame}, this setting has no effect&lt;/p&gt;

&lt;p&gt;Default value is 100&lt;/p&gt;</long-description>
          <tag line="2013" name="access" description="public"/>
          <tag line="2013" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2039" package="Default">
        <name>$image_watermark</name>
        <default/>
        <docblock>
          <description>Adds a watermark on the image</description>
          <long-description>&lt;p&gt;Value is a local image filename, relative or absolute. GIF, JPG, BMP and PNG are supported, as well as PNG alpha.&lt;/p&gt;

&lt;p&gt;If set, this setting allow the use of all other settings starting with image_watermark_&lt;/p&gt;

&lt;p&gt;Default value is null&lt;/p&gt;</long-description>
          <tag line="2027" name="access" description="public"/>
          <tag line="2027" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2057" package="Default">
        <name>$image_watermark_position</name>
        <default/>
        <docblock>
          <description>Sets the watermarkposition within the image</description>
          <long-description>&lt;p&gt;Value is one or two out of 'TBLR' (top, bottom, left, right)&lt;/p&gt;

&lt;p&gt;The positions are as following:   TL  T  TR
                                  L       R
                                  BL  B  BR&lt;/p&gt;

&lt;p&gt;Default value is null (centered, horizontal and vertical)&lt;/p&gt;

&lt;p&gt;Note that is {@link image_watermark_x} and {@link image_watermark_y} are used, this setting has no effect&lt;/p&gt;</long-description>
          <tag line="2041" name="access" description="public"/>
          <tag line="2041" name="var" description="" type="\string;">
            <type by_reference="false">\string;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2070" package="Default">
        <name>$image_watermark_x</name>
        <default/>
        <docblock>
          <description>Sets the watermark absolute X position within the image</description>
          <long-description>&lt;p&gt;Value is in pixels, representing the distance between the top of the image and the watermark
If a negative value is used, it will represent the distance between the bottom of the image and the watermark&lt;/p&gt;

&lt;p&gt;Default value is null (so {@link image_watermark_position} is used)&lt;/p&gt;</long-description>
          <tag line="2059" name="access" description="public"/>
          <tag line="2059" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2083" package="Default">
        <name>$image_watermark_y</name>
        <default/>
        <docblock>
          <description>Sets the twatermark absolute Y position within the image</description>
          <long-description>&lt;p&gt;Value is in pixels, representing the distance between the left of the image and the watermark
If a negative value is used, it will represent the distance between the right of the image and the watermark&lt;/p&gt;

&lt;p&gt;Default value is null (so {@link image_watermark_position} is used)&lt;/p&gt;</long-description>
          <tag line="2072" name="access" description="public"/>
          <tag line="2072" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2101" package="Default">
        <name>$image_watermark_no_zoom_in</name>
        <default/>
        <docblock>
          <description>Prevents the watermark to be resized up if it is smaller than the image</description>
          <long-description>&lt;p&gt;If the watermark if smaller than the destination image, taking in account the desired watermark position
then it will be resized up to fill in the image (minus the {@link image_watermark_x} or {@link image_watermark_y} values)&lt;/p&gt;

&lt;p&gt;If you don't want your watermark to be resized in any way, then
set {@link image_watermark_no_zoom_in} and {@link image_watermark_no_zoom_out} to true
If you want your watermark to be resized up or doan to fill in the image better, then
set {@link image_watermark_no_zoom_in} and {@link image_watermark_no_zoom_out} to false&lt;/p&gt;

&lt;p&gt;Default value is true (so the watermark will not be resized up, which is the behaviour most people expect)&lt;/p&gt;</long-description>
          <tag line="2085" name="access" description="public"/>
          <tag line="2085" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2119" package="Default">
        <name>$image_watermark_no_zoom_out</name>
        <default/>
        <docblock>
          <description>Prevents the watermark to be resized down if it is bigger than the image</description>
          <long-description>&lt;p&gt;If the watermark if bigger than the destination image, taking in account the desired watermark position
then it will be resized down to fit in the image (minus the {@link image_watermark_x} or {@link image_watermark_y} values)&lt;/p&gt;

&lt;p&gt;If you don't want your watermark to be resized in any way, then
set {@link image_watermark_no_zoom_in} and {@link image_watermark_no_zoom_out} to true
If you want your watermark to be resized up or doan to fill in the image better, then
set {@link image_watermark_no_zoom_in} and {@link image_watermark_no_zoom_out} to false&lt;/p&gt;

&lt;p&gt;Default value is false (so the watermark may be shrinked to fit in the image)&lt;/p&gt;</long-description>
          <tag line="2103" name="access" description="public"/>
          <tag line="2103" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2127" package="Default">
        <name>$mime_types</name>
        <default/>
        <docblock>
          <description>List of MIME types per extension</description>
          <long-description/>
          <tag line="2121" name="access" description="private"/>
          <tag line="2121" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2140" package="Default">
        <name>$allowed</name>
        <default/>
        <docblock>
          <description>Allowed MIME types</description>
          <long-description>&lt;p&gt;Default is a selection of safe mime-types, but you might want to change it&lt;/p&gt;

&lt;p&gt;Simple wildcards are allowed, such as image/* or application/*
If there is only one MIME type allowed, then it can be a string instead of an array&lt;/p&gt;</long-description>
          <tag line="2129" name="access" description="public"/>
          <tag line="2129" name="var" description="OR string" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2154" package="Default">
        <name>$forbidden</name>
        <default/>
        <docblock>
          <description>Forbidden MIME types</description>
          <long-description>&lt;p&gt;Default is a selection of safe mime-types, but you might want to change it
To only check for forbidden MIME types, and allow everything else, set {@link allowed} to array('* / *') without the spaces&lt;/p&gt;

&lt;p&gt;Simple wildcards are allowed, such as image/* or application/*
If there is only one MIME type forbidden, then it can be a string instead of an array&lt;/p&gt;</long-description>
          <tag line="2142" name="access" description="public"/>
          <tag line="2142" name="var" description="OR string" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2165" package="Default">
        <name>$translation</name>
        <default/>
        <docblock>
          <description>Array of translated error messages</description>
          <long-description>&lt;p&gt;By default, the language is english (en_GB)
Translations can be in separate files, in a lang/ subdirectory&lt;/p&gt;</long-description>
          <tag line="2156" name="access" description="public"/>
          <tag line="2156" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="2175" package="Default">
        <name>$language</name>
        <default/>
        <docblock>
          <description>Language selected for the translations</description>
          <long-description>&lt;p&gt;By default, the language is english ("en_GB")&lt;/p&gt;</long-description>
          <tag line="2167" name="access" description="public"/>
          <tag line="2167" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="2184" package="Default">
        <name>init</name>
        <docblock>
          <description>Init or re-init all the processing variables to their default values</description>
          <long-description>&lt;p&gt;This function is called in the constructor, and after each call of {@link process}&lt;/p&gt;</long-description>
          <tag line="2177" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2504" package="Default">
        <name>PPI_Model_Upload</name>
        <docblock>
          <description>Constructor. Checks if the file has been uploaded</description>
          <long-description>&lt;p&gt;The constructor takes $_FILES['form_field'] array as argument
where form_field is the form field name&lt;/p&gt;

&lt;p&gt;The constructor will check if the file has been uploaded in its temporary location, and
accordingly will set {@link uploaded} (and {@link error} is an error occurred)&lt;/p&gt;

&lt;p&gt;If the file has been uploaded, the constructor will populate all the variables holding the upload
information (none of the processing class variables are used here).
You can have access to information about the file (name, size, MIME type...).&lt;/p&gt;

&lt;p&gt;Alternatively, you can set the first argument to be a local filename (string)
This allows processing of a local file, as if the file was uploaded&lt;/p&gt;

&lt;p&gt;The optional second argument allows you to set the language for the error messages&lt;/p&gt;</long-description>
          <tag line="2480" name="access" description="private"/>
          <tag line="2480" name="param" description="&lt;p&gt;$_FILES['form_field'] or string $file Local filename&lt;/p&gt;&#10;" type="array" variable="$file">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2480" name="param" description="&lt;p&gt;Optional language code&lt;/p&gt;" type="string" variable="$lang">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="2504">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
        <argument line="2504">
          <name>$lang</name>
          <default>'en_GB'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2764" package="Default">
        <name>gdversion</name>
        <docblock>
          <description>Returns the version of GD</description>
          <long-description/>
          <tag line="2757" name="access" description="public"/>
          <tag line="2757" name="param" description="&lt;p&gt;Optional flag to get precise version&lt;/p&gt;" type="boolean" variable="$full">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2757" name="return" description="GD version" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="2764">
          <name>$full</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2802" package="Default">
        <name>rmkdir</name>
        <docblock>
          <description>Creates directories recursively</description>
          <long-description/>
          <tag line="2794" name="access" description="private"/>
          <tag line="2794" name="param" description="&lt;p&gt;Path to create&lt;/p&gt;" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2794" name="param" description="&lt;p&gt;Optional permissions&lt;/p&gt;" type="integer" variable="$mode">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="2794" name="return" description="Success" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="2802">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="2802">
          <name>$mode</name>
          <default>0777</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2814" package="Default">
        <name>_mkdir</name>
        <docblock>
          <description>Creates directory</description>
          <long-description/>
          <tag line="2806" name="access" description="private"/>
          <tag line="2806" name="param" description="&lt;p&gt;Path to create&lt;/p&gt;" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2806" name="param" description="&lt;p&gt;Optional permissions&lt;/p&gt;" type="integer" variable="$mode">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="2806" name="return" description="Success" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="2814">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="2814">
          <name>$mode</name>
          <default>0777</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2829" package="Default">
        <name>translate</name>
        <docblock>
          <description>Translate error messages</description>
          <long-description/>
          <tag line="2821" name="access" description="private"/>
          <tag line="2821" name="param" description="&lt;p&gt;Message to translate&lt;/p&gt;" type="string" variable="$str">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2821" name="param" description="&lt;p&gt;Optional token values&lt;/p&gt;" type="array" variable="$tokens">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2821" name="return" description="Translated string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="2829">
          <name>$str</name>
          <default/>
          <type/>
        </argument>
        <argument line="2829">
          <name>$tokens</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2842" package="Default">
        <name>getcolors</name>
        <docblock>
          <description>Decodes colors</description>
          <long-description/>
          <tag line="2835" name="access" description="private"/>
          <tag line="2835" name="param" description="&lt;p&gt;Color string&lt;/p&gt;" type="string" variable="$color">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2835" name="return" description="RGB colors" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2842">
          <name>$color</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2857" package="Default">
        <name>getsize</name>
        <docblock>
          <description>Decodes sizes</description>
          <long-description/>
          <tag line="2850" name="access" description="private"/>
          <tag line="2850" name="param" description="&lt;p&gt;Size in bytes, or shorthand byte options&lt;/p&gt;" type="string" variable="$size">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2850" name="return" description="Size in bytes" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="2857">
          <name>$size</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2881" package="Default">
        <name>getoffsets</name>
        <docblock>
          <description>Decodes offsets</description>
          <long-description/>
          <tag line="2870" name="access" description="private"/>
          <tag line="2870" name="param" description="&lt;p&gt;Offsets, as an integer, a string or an array&lt;/p&gt;" type="\misc" variable="$offsets">
            <type by_reference="false">\misc</type>
          </tag>
          <tag line="2870" name="param" description="&lt;p&gt;Reference picture width&lt;/p&gt;" type="integer" variable="$x">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="2870" name="param" description="&lt;p&gt;Reference picture height&lt;/p&gt;" type="integer" variable="$y">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="2870" name="param" description="&lt;p&gt;Round offsets before returning them&lt;/p&gt;" type="boolean" variable="$round">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2870" name="param" description="&lt;p&gt;Allow negative offsets to be returned&lt;/p&gt;" type="boolean" variable="$negative">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2870" name="return" description="Array of four offsets (TRBL)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2881">
          <name>$offsets</name>
          <default/>
          <type/>
        </argument>
        <argument line="2881">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="2881">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
        <argument line="2881">
          <name>$round</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="2881">
          <name>$negative</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2924" package="Default">
        <name>imagecreatenew</name>
        <docblock>
          <description>Creates a container image</description>
          <long-description/>
          <tag line="2914" name="access" description="private"/>
          <tag line="2914" name="param" description="&lt;p&gt;Width&lt;/p&gt;" type="integer" variable="$x">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="2914" name="param" description="&lt;p&gt;Height&lt;/p&gt;" type="integer" variable="$y">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="2914" name="param" description="&lt;p&gt;Optional flag to draw the background color or not&lt;/p&gt;" type="boolean" variable="$fill">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2914" name="param" description="&lt;p&gt;Optional flag to set the background to be transparent&lt;/p&gt;" type="boolean" variable="$trsp">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2914" name="return" description="Container image" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="2924">
          <name>$x</name>
          <default/>
          <type/>
        </argument>
        <argument line="2924">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
        <argument line="2924">
          <name>$fill</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="2924">
          <name>$trsp</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2961" package="Default">
        <name>imagetransfer</name>
        <docblock>
          <description>Transfers an image from the container to the destination image</description>
          <long-description/>
          <tag line="2953" name="access" description="private"/>
          <tag line="2953" name="param" description="&lt;p&gt;Container image&lt;/p&gt;" type="resource" variable="$src_im">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="2953" name="param" description="&lt;p&gt;Destination image&lt;/p&gt;" type="resource" variable="$dst_im">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="2953" name="return" description="Destination image" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="2961">
          <name>$src_im</name>
          <default/>
          <type/>
        </argument>
        <argument line="2961">
          <name>$dst_im</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2984" package="Default">
        <name>imagecopymergealpha</name>
        <docblock>
          <description>Merges two images</description>
          <long-description>&lt;p&gt;If the output format is PNG, then we do it pixel per pixel to retain the alpha channel&lt;/p&gt;</long-description>
          <tag line="2967" name="access" description="private"/>
          <tag line="2967" name="param" description="&lt;p&gt;Destination image&lt;/p&gt;" type="resource" variable="$dst_img">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;Overlay image&lt;/p&gt;" type="resource" variable="$src_img">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;x-coordinate of destination point&lt;/p&gt;&#10;" type="int" variable="$dst_x">
            <type by_reference="false">int</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;y-coordinate of destination point&lt;/p&gt;&#10;" type="int" variable="$dst_y">
            <type by_reference="false">int</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;x-coordinate of source point&lt;/p&gt;&#10;" type="int" variable="$src_x">
            <type by_reference="false">int</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;y-coordinate of source point&lt;/p&gt;&#10;" type="int" variable="$src_y">
            <type by_reference="false">int</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;Source width&lt;/p&gt;" type="int" variable="$src_w">
            <type by_reference="false">int</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;Source height&lt;/p&gt;" type="int" variable="$src_h">
            <type by_reference="false">int</type>
          </tag>
          <tag line="2967" name="param" description="&lt;p&gt;Optional percentage of the overlay, between 0 and 100 (default: 100)&lt;/p&gt;&#10;" type="int" variable="$pct">
            <type by_reference="false">int</type>
          </tag>
          <tag line="2967" name="return" description="Destination image" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="2984">
          <name>$dst_im</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$src_im</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$dst_x</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$dst_y</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$src_x</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$src_y</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$src_w</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$src_h</name>
          <default/>
          <type/>
        </argument>
        <argument line="2984">
          <name>$pct</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3060" package="Default">
        <name>process</name>
        <docblock>
          <description>Actually uploads the file, and act on it according to the set processing class variables</description>
          <long-description>&lt;p&gt;This function copies the uploaded file to the given location, eventually performing actions on it.
Typically, you can call {@link process} several times for the same file,
for instance to create a resized image and a thumbnail of the same file.
The original uploaded file remains intact in its temporary location, so you can use {@link process} several times.
You will be able to delete the uploaded file with {@link clean} when you have finished all your {@link process} calls.&lt;/p&gt;

&lt;p&gt;According to the processing class variables set in the calling file, the file can be renamed,
and if it is an image, can be resized or converted.&lt;/p&gt;

&lt;p&gt;When the processing is completed, and the file copied to its new location, the
processing class variables will be reset to their default value.
This allows you to set new properties, and perform another {@link process} on the same uploaded file&lt;/p&gt;

&lt;p&gt;If the function is called with a null or empty argument, then it will return the content of the picture&lt;/p&gt;

&lt;p&gt;It will set {@link processed} (and {@link error} is an error occurred)&lt;/p&gt;</long-description>
          <tag line="3036" name="access" description="public"/>
          <tag line="3036" name="param" description="&lt;p&gt;Optional path location of the uploaded file, with an ending slash&lt;/p&gt;" type="string" variable="$server_path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3036" name="return" description="Optional content of the image" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="3060">
          <name>$server_path</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4779" package="Default">
        <name>clean</name>
        <docblock>
          <description>Deletes the uploaded file from its temporary location</description>
          <long-description>&lt;p&gt;When PHP uploads a file, it stores it in a temporary location.
When you {@link process} the file, you actually copy the resulting file to the given location, it doesn't alter the original file.
Once you have processed the file as many times as you wanted, you can delete the uploaded file.
If there is open_basedir restrictions, the uploaded file is in fact a temporary file&lt;/p&gt;

&lt;p&gt;You might want not to use this function if you work on local files, as it will delete the source file&lt;/p&gt;</long-description>
          <tag line="4767" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4793" package="Default">
        <name>imagecreatefrombmp</name>
        <docblock>
          <description>Opens a BMP image</description>
          <long-description>&lt;p&gt;This function has been written by DHKold, and is used with permission of the author&lt;/p&gt;</long-description>
          <tag line="4786" name="access" description="public"/>
        </docblock>
        <argument line="4793">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4868" package="Default">
        <name>imagebmp</name>
        <docblock>
          <description>Saves a BMP image</description>
          <long-description>&lt;p&gt;This function has been published on the PHP website, and can be used freely&lt;/p&gt;</long-description>
          <tag line="4861" name="access" description="public"/>
        </docblock>
        <argument line="4868">
          <name>$im</name>
          <default/>
          <type/>
        </argument>
        <argument line="4868">
          <name>$filename</name>
          <default>""</default>
          <type/>
        </argument>
      </method>
    </class>