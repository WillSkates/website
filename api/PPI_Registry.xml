<?xml version="1.0" encoding="utf-8"?>
<class final="false" abstract="false" line="9" namespace="PPI" package="Default">
      <name>Registry</name>
      <extends/>
      <full_name>\PPI\Registry</full_name>
      <property final="false" static="true" visibility="private" line="15" package="Default">
        <name>$_instance</name>
        <default>null</default>
        <docblock>
          <description>Registry object provides storage for shared objects.</description>
          <long-description/>
          <tag line="11" name="var" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="22" package="Default">
        <name>$_vars</name>
        <default>array()</default>
        <docblock>
          <description>The registrys internal data</description>
          <long-description/>
          <tag line="17" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="27" package="Default">
        <name>__construct</name>
        <docblock>
          <description/>
          <long-description/>
          <tag line="24" name="param" description="&lt;p&gt;Initial data for the registry&lt;/p&gt;" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="34" package="Default">
        <name>getInstance</name>
        <docblock>
          <description>Retrieves the default instance of the registry, if it doesn't exist then we create it.</description>
          <long-description/>
          <tag line="29" name="return" description="" type="\PPI\PPI_Registry">
            <type by_reference="false">\PPI\PPI_Registry</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="48" package="Default">
        <name>setInstance</name>
        <docblock>
          <description>Set the default registry instance to a specified instance.</description>
          <long-description/>
          <tag line="41" name="param" description="&lt;p&gt;An object instance of type PPI_Registry&lt;/p&gt;" type="object" variable="$registry">
            <type by_reference="false">object</type>
          </tag>
          <tag line="41" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="41" name="throws" description="if registry is already initialized." type="\PPI\PPI_Exception">
            <type by_reference="false">\PPI\PPI_Exception</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$registry</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="60" package="Default">
        <name>legacyInit</name>
        <docblock>
          <description>Initialize the default registry instance.</description>
          <long-description/>
          <tag line="55" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="71" package="Default">
        <name>init</name>
        <docblock>
          <description>Initialisation function, currently used to set mock data</description>
          <long-description/>
          <tag line="64" name="static" description=""/>
          <tag line="64" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="85" package="Default">
        <name>get</name>
        <docblock>
          <description>Get a value from the registey</description>
          <long-description/>
          <tag line="78" name="param" description="" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="78" name="throws" description="if no entry is registerd for $index." type="\PPI\PPI_Exception">
            <type by_reference="false">\PPI\PPI_Exception</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="85">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="96" package="Default">
        <name>set</name>
        <docblock>
          <description>Set a value in the registry</description>
          <long-description/>
          <tag line="89" name="param" description="" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="param" description="&lt;p&gt;The object to store in the ArrayObject.&lt;/p&gt;" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="89" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
        <argument line="96">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="106" package="Default">
        <name>remove</name>
        <docblock>
          <description>Removes an offset from the registry</description>
          <long-description/>
          <tag line="100" name="param" description="" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="116" package="Default">
        <name>exists</name>
        <docblock>
          <description>Checks if an offset exists in the registry</description>
          <long-description/>
          <tag line="110" name="param" description="" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>