<?xml version="1.0" encoding="utf-8"?>
<class final="false" abstract="false" line="8" namespace="default" package="www\ppiframework\com">
      <name>PPI_Helper_Template_PHP</name>
      <extends/>
      <full_name>\PPI_Helper_Template_PHP</full_name>
      <docblock>
        <description/>
        <long-description/>
        <tag line="2" name="author" description="Paul Dragoonis" link="mailto:dragoonis@php.net"/>
        <tag line="2" name="license" description="MIT" link="http://opensource.org/licenses/mit-license.php"/>
        <tag line="2" name="package" description="View"/>
        <tag line="2" name="package" description="www.ppiframework.com"/>
      </docblock>
      <implements link="db_Interface_Template.html#\PPI_Interface_Template">\PPI_Interface_Template</implements>
      <property final="false" static="false" visibility="protected" line="15" package="Default">
        <name>$_viewVars</name>
        <default>array()</default>
        <docblock>
          <description>The variables that are to be rendered in the View file</description>
          <long-description/>
          <tag line="10" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="22" package="Default">
        <name>$_config</name>
        <default>null</default>
        <docblock>
          <description>The config object</description>
          <long-description/>
          <tag line="17" name="var" description="" type="null|object">
            <type by_reference="false">null</type>
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="29" package="Default">
        <name>__construct</name>
        <docblock>
          <description>The constructor</description>
          <long-description/>
          <tag line="24" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="43" package="Default">
        <name>render</name>
        <docblock>
          <description>Actually load in the view and render it.</description>
          <long-description/>
          <tag line="37" name="param" description="&lt;p&gt;The filename to load, such as the master template&lt;/p&gt;" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="61" package="Default">
        <name>getTemplatePath</name>
        <docblock>
          <description>Get the full path to the template file by providing the template name</description>
          <long-description/>
          <tag line="52" name="param" description="" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="todo" description="Have a hashmap class property to store $templateName =&gt; path for caching.&#10;This means we don't need to lookup the config or check if an extension persists."/>
        </docblock>
        <argument line="61">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="74" package="Default">
        <name>templateExists</name>
        <docblock>
          <description>Check if a template exists</description>
          <long-description/>
          <tag line="68" name="param" description="&lt;p&gt;The Template Name&lt;/p&gt;" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="85" package="Default">
        <name>checkTemplateExists</name>
        <docblock>
          <description>Check if a template exists. If it does not, throw an exception</description>
          <long-description/>
          <tag line="78" name="throws" description="" type="\PPI_Exception">
            <type by_reference="false" link="db_Exception.html#\PPI_Exception">\PPI_Exception</type>
          </tag>
          <tag line="78" name="param" description="&lt;p&gt;The Template Name&lt;/p&gt;" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="98" package="Default">
        <name>assign</name>
        <docblock>
          <description>Assign a value for this current view</description>
          <long-description/>
          <tag line="91" name="param" description="&lt;p&gt;The variable name&lt;/p&gt;" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="91" name="param" description="&lt;p&gt;The variable value&lt;/p&gt;" type="string" variable="$val">
            <type by_reference="false">string</type>
          </tag>
          <tag line="91" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="98">
          <name>$val</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="107" package="Default">
        <name>getTemplateExtension</name>
        <docblock>
          <description>Get the default extension for our view files, config override or defaulting to .php</description>
          <long-description/>
          <tag line="102" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="116" package="Default">
        <name>getDefaultMasterTemplate</name>
        <docblock>
          <description>Get the default master template filename</description>
          <long-description/>
          <tag line="111" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="125" package="Default">
        <name>getDefaultExtension</name>
        <docblock>
          <description>Get the default file extension for templates on this renderer</description>
          <long-description/>
          <tag line="120" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>